This example demonstrates the solution of a three-dimensional
elasticity problem. It illustrates how to:

* Minimise a non-quadratic functional
* Use automatic computation of the directional derivative
* Use VariationalProblem for a nonlinear equation
* Create and apply Dirichlet boundary conditions
* Define Expressions
* Create FunctionSpace
* Define compiled subdomains
* Specific form compiler optimization options

Equation and problem definition
-------------------------------

Hyperelasticity problems can be expressed as minimisation problems, and the
minimization approach is adopted in this example.  The task is to find the
displacement field :math:`u \in \mathbb{R}^{d}` that minimises the total
potential energy :math:`\Pi`:

.. math::
   \min_{u \in V} \Pi

where :math:`V` is a suitable function space that satisfies boundary
conditions on :math:`u`.  The total potential energy is given by

.. math::
   \Pi = \int_{\Omega} \psi(u) \, dx - \int_{\Omega} B \cdot u \, dx - \int_{\partial\Omega} T \cdot u \, ds

where :math:`\psi` is the elastic stored energy density, :math:`B` is a
body force (per unit reference volume) and :math:`T` is a traction force
(per unit reference area).

At minimum points of :math:`\Pi`, the directional derivative of :math:`\Pi`
with respect to change in :math:`u`

.. math::
   :label: first_variation

   L(u; v) = D_{v} \Pi = \left. \frac{d \Pi(u + \epsilon v)}{d\epsilon} \right|_{\epsilon = 0}

is equal to zero for all :math:`v \in V`:

.. math::
   L(u; v) = 0 \quad \forall \ v \in V

To minimise the potential energy, solutions the above equation are sought.
:math:`L(u; v)` is nonlinear in :math:`u`, so to solve this problem using
Newton's method the Jacobian of :math:`L` is required,

.. math::
   :label: second_variation

   a(du; v) = D_{du} L = \left. \frac{d L(u + \epsilon du; v)}{d\epsilon} \right|_{\epsilon = 0}



Elastic stored energy density
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To define the elastic stored energy density, consider the deformation
gradient :math:`F`

.. math::
   F = \nabla u

the right Cauchy-Green tensor :math:`C`

.. math::
   C = F^{T} F

and the scalars  :math:`J` and :math:`I_{c}`

.. math::
   J     &= \det(F) \\
   I_{c} &= {\rm trace}(C)

This demo considers a common neo-Hookean stored energy model of the form

.. math::
   \psi =  \frac{\mu}{2} (I_{c} - 3) - \mu \ln(J) + \frac{\lambda}{2}\ln(J)^{2}

where :math:`\mu` and :math:`\lambda` are the Lame parameters. In terms of
the more common Young's modulus :math:`E` and Poisson ratio :math:`\nu`:

.. math::
    \lambda &= \frac{E \nu}{(1 + \nu)(1 - 2\nu)} \\
    \mu     &=  \frac{E}{2(1 + \nu)}


Demo parameters
^^^^^^^^^^^^^^^

The following functions, boundaries and parameters are used in this demo:

* :math:`\Omega = (0, 1) \times (0, 1) \times (0, 1)` (unit cube)

* :math:`\Gamma_{D_{0}} = 0 \times (0, 1) \times (0, 1)` (Dirichlet boundary)

* :math:`\Gamma_{D_{1}} = 1 \times (0, 1) \times (0, 1)` (Dirichlet boundary)

* :math:`\Gamma_{N} = \partial \Omega \backslash \Gamma_{D}` (Neumann boundary)

* On  :math:`\Gamma_{D_{0}}`
    .. math::
        u = (&0, \\
             &(0.5 + (y - 0.5)\cos(\pi/3) - (z - 0.5)\sin(\pi/3) - y)/2, \\
             &(0.5 + (y - 0.5)\sin(\pi/3) + (z - 0.5)\cos(\pi/3) - x))/2)
* :math:`u = (0, 0, 0) \quad {\rm on} \ \Gamma_{D_{1}}`

* :math:`T = (0.1, 0, 0) \quad {\rm on} \ \Gamma_{N}`

* :math:`B = (0, -0.5, 0)`

* :math:`E    = 10.0`

* :math:`\nu  = 0.3`
