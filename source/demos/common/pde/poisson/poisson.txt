
.. warning::

    The documentation for this demo is incomplete, we still need to link to
    relevant sections of the programmer's reference (for class names).
    We probably also want to give more comments on what the individual
    statements in the code snippets mean and if there are any alternatives.

This demo illustrates how to:

* Solve a linear partial differential equation
* Use VariationalProblem
* Create and apply Dirichlet boundary conditions
* Define Expressions
* Define FunctionSpace
* Create a Subdomain

Equation and problem definition
-------------------------------

The Poisson equation is the canonical elliptic partial differential equation.
For a domain :math:`\Omega \subset \mathbb{R}^n`, the Poisson equation with
particular boundary conditions reads:

.. math::
   - \nabla^{2} u &= f \quad {\rm in} \ \Omega \\
                u &= 0 \quad {\rm on} \ \Gamma_{D} \\
                \nabla u \cdot \boldsymbol{n} &= g \quad {\rm on} \ \Gamma_{N} \\


The variational form of Poisson equation reads: find :math:`u \in V` such that

.. math::
   a(u, v) = L(v) \quad \forall v \ \in V,

where :math:`V` is a suitable function space and

.. math::
   a(u, v) &= \int_{\Omega} \nabla u \cdot \nabla v \, {\rm d} \Omega \\
   L(v)    &= \int_{\Omega} f v \, {\rm d}\Omega
            + \int_{\Gamma_{N}} g v \, {\rm d}\Gamma

The expression :math:`a(u, v)` is the bilinear form and :math:`L(v)`
is the linear form. It is assuumed that all functions in :math:`V`
satisfy the Dirichlet boundary conditions (:math:`u = 0 \ {\rm on} \ \Gamma_{D}`).

The following definitions of functions and boundaries are used in this demo:

* :math:`\Omega = [0,1] \times [0,1]` (a unit square)
* :math:`\Gamma_{D} = \{(\pm 1, y) \in \partial \Omega\}` (Dirichlet boundary)
* :math:`\Gamma_{N} = \{(x, \pm 1) \in \partial \Omega\}` (Neumann boundary)
* :math:`h = \sin(5x)` (normal derivative)
* :math:`f = 10\exp(-((x - 0.5)^2 + (y - 0.5)^2) / 0.02)` (source term)

