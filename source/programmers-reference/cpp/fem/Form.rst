.. Documentation for the header file dolfin/fem/Form.h

.. _programmers_reference_cpp_fem_Mesh:

Form.h
======

.. note::

    The documentation on this page was automatically extracted from
    the DOLFIN C++ code and needs to be edited and expanded.

.. cpp:class:: Form

        Base class for UFC code generated by FFC for DOLFIN with option -l

    .. cpp:function:: Form(const ufc::form& ufc_form,
                           const std::vector<const FunctionSpace*>& function_spaces,
                           const std::vector<const GenericFunction*>& coefficients)
    
        Create form (constructor used from Python interface)

    .. cpp:function:: Form(dolfin::uint rank, dolfin::uint num_coefficients)
    
        Create form of given rank with given number of coefficients

    .. cpp:function:: const GenericFunction& coefficient(std::string name) const
    
        Return coefficient with given name

    .. cpp:function:: const GenericFunction& coefficient(uint i) const
    
        Return coefficient with given number

    .. cpp:function:: const Mesh& mesh() const
    
        Return mesh

    .. cpp:function:: const boost::shared_ptr<const FunctionSpace> function_space(uint i) const
    
        Return function space for given argument

    .. cpp:function:: const ufc::form& ufc_form() const
    
        Return UFC form

    .. cpp:function:: friend class LinearPDE
    
        Friends

    .. cpp:function:: std::vector<boost::shared_ptr<const FunctionSpace> > function_spaces() const
    
        Return function spaces for arguments

    .. cpp:function:: std::vector<const GenericFunction*> coefficients() const
    
        Return all coefficients

    .. cpp:function:: uint num_coefficients() const
    
        Return number of coefficients

    .. cpp:function:: uint rank() const
    
        Return rank of form (bilinear form = 2, linear form = 1, functional = 0, etc)

    .. cpp:function:: virtual dolfin::uint coefficient_number(const std::string & name) const
    
        Return the number of the coefficient with this name

    .. cpp:function:: virtual std::string coefficient_name(dolfin::uint i) const
    
        Return the name of the coefficient with this number

    .. cpp:function:: virtual ~Form()
    
        Destructor

    .. cpp:function:: void check() const
    
        Check function spaces and coefficients

    .. cpp:function:: void set_coefficient(std::string name, boost::shared_ptr<const GenericFunction> coefficient)
    
        Set coefficient with given name (shared pointer version)

    .. cpp:function:: void set_coefficient(std::string name, const GenericFunction& coefficient)
    
        Set coefficient with given name

    .. cpp:function:: void set_coefficient(uint i, boost::shared_ptr<const GenericFunction> coefficient)
    
        Set coefficient with given number (shared pointer version)

    .. cpp:function:: void set_coefficient(uint i, const GenericFunction& coefficient)
    
        Set coefficient with given number

    .. cpp:function:: void set_coefficients(std::map<std::string, boost::shared_ptr<const GenericFunction> > coefficients)
    
        Set all coefficients in given map, possibly a subset  (shared pointer version)

    .. cpp:function:: void set_coefficients(std::map<std::string, const GenericFunction*> coefficients)
    
        Set all coefficients in given map, possibly a subset

    .. cpp:function:: void set_mesh(boost::shared_ptr<const Mesh> mesh)
    
        Set mesh, necessary for functionals when there are no function spaces

    .. cpp:function:: void set_mesh(const Mesh& mesh)
    
        Set mesh, necessary for functionals when there are no function spaces

