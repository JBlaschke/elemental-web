This is FFC, the FEniCS Form Compiler, version 0.9.10.
For further information, visit http://www.fenics.org/ffc/.

Compiling form Poisson

Compiler stage 1: Analyzing form(s)
-----------------------------------
  
  Name:                             'a'
  Rank:                             2
  Cell:                             <interval cell in R1>
  Topological dimension:            1
  Geometric dimension:              1
  Number of facets:                 2
  Number of coefficients:           0
  Number of cell domains:           1
  Number of exterior facet domains: 0
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0, v_1]'
  Coefficients:                     '[]'
  Argument names:                   '[v, u]'
  Coefficient names:                '[]'
  Unique elements:                  'CG1(?)'
  Unique sub elements:              'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 0
  quadrature_degree: auto --> 0
  quadrature_rule:   auto --> default
  
  Name:                             'L'
  Rank:                             1
  Cell:                             <interval cell in R1>
  Topological dimension:            1
  Geometric dimension:              1
  Number of facets:                 2
  Number of coefficients:           2
  Number of cell domains:           1
  Number of exterior facet domains: 1
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0]'
  Coefficients:                     '[w_0, w_1]'
  Argument names:                   '[v]'
  Coefficient names:                '[f, g]'
  Unique elements:                  'CG1(?)'
  Unique sub elements:              'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 2
  quadrature_degree: auto --> 2
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 2
  quadrature_degree: auto --> 2
  quadrature_rule:   auto --> default
  
Compiler stage 1 finished in 0.0288601 seconds.

Compiler stage 2: Computing intermediate representation
-------------------------------------------------------
  Computing representation of 1 elements
  Reusing element from cache
  Computing representation of 1 dofmaps
  Reusing element from cache
  Computing representation of integrals
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  4 entries computed in 0.00213 seconds
  Shape of reference tensor: (2, 2, 1, 1)
  Primary multi index:   rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  Secondary multi index: rank = 2 dims = [1, 1] indices = [[0, 0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [1, 1] indices = [[0, 0]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  4 entries computed in 0.00274 seconds
  Shape of reference tensor: (2, 2)
  Primary multi index:   rank = 1 dims = [2] indices = [[0], [1]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  4 entries computed in 0.00172 seconds
  Shape of reference tensor: (2, 2)
  Primary multi index:   rank = 1 dims = [2] indices = [[0], [1]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  4 entries computed in 0.00167 seconds
  Shape of reference tensor: (2, 2)
  Primary multi index:   rank = 1 dims = [2] indices = [[0], [1]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing representation of forms
  
Compiler stage 2 finished in 0.02543 seconds.

Compiler stage 3: Optimizing intermediate representation
--------------------------------------------------------
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  
Compiler stage 3 finished in 0.00100517 seconds.

Compiler stage 4: Generating code
---------------------------------
  Generating code for 1 elements
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: K_00
  Removing unused variable: detJ
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Generating code for 1 dofmaps
  Generating code for integrals
  Removing unused variable: K_00
  Removing unused variable: K_00
  Removing unused variable: detJ
  Removing unused variable: J_00
  Removing unused variable: x
  Generating code for forms
  
Compiler stage 4 finished in 0.053658 seconds.

Compiler stage 4.1: Generating additional wrapper code
------------------------------------------------------
  Generating wrapper code for DOLFIN
  
Compiler stage 4.1 finished in 0.00257516 seconds.

Compiler stage 5: Formatting code
---------------------------------
  Output written to ./Poisson.h.
  
Compiler stage 5 finished in 0.00112796 seconds.

[1;37;32mFFC finished in 0.113416 seconds.[0m
This is FFC, the FEniCS Form Compiler, version 0.9.10.
For further information, visit http://www.fenics.org/ffc/.

Compiling form Poisson

Compiler stage 1: Analyzing form(s)
-----------------------------------
  
  Name:                             'a'
  Rank:                             2
  Cell:                             <interval cell in R1>
  Topological dimension:            1
  Geometric dimension:              1
  Number of facets:                 2
  Number of coefficients:           0
  Number of cell domains:           1
  Number of exterior facet domains: 0
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0, v_1]'
  Coefficients:                     '[]'
  Argument names:                   '[v, u]'
  Coefficient names:                '[]'
  Unique elements:                  'CG1(?)'
  Unique sub elements:              'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 0
  quadrature_degree: auto --> 0
  quadrature_rule:   auto --> default
  
  Name:                             'L'
  Rank:                             1
  Cell:                             <interval cell in R1>
  Topological dimension:            1
  Geometric dimension:              1
  Number of facets:                 2
  Number of coefficients:           2
  Number of cell domains:           1
  Number of exterior facet domains: 1
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0]'
  Coefficients:                     '[w_0, w_1]'
  Argument names:                   '[v]'
  Coefficient names:                '[f, g]'
  Unique elements:                  'CG1(?)'
  Unique sub elements:              'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 2
  quadrature_degree: auto --> 2
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 2
  quadrature_degree: auto --> 2
  quadrature_rule:   auto --> default
  
Compiler stage 1 finished in 0.0285192 seconds.

Compiler stage 2: Computing intermediate representation
-------------------------------------------------------
  Computing representation of 1 elements
  Reusing element from cache
  Computing representation of 1 dofmaps
  Reusing element from cache
  Computing representation of integrals
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  4 entries computed in 0.00248 seconds
  Shape of reference tensor: (2, 2, 1, 1)
  Primary multi index:   rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  Secondary multi index: rank = 2 dims = [1, 1] indices = [[0, 0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [1, 1] indices = [[0, 0]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  4 entries computed in 0.00284 seconds
  Shape of reference tensor: (2, 2)
  Primary multi index:   rank = 1 dims = [2] indices = [[0], [1]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  4 entries computed in 0.00156 seconds
  Shape of reference tensor: (2, 2)
  Primary multi index:   rank = 1 dims = [2] indices = [[0], [1]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  4 entries computed in 0.000862 seconds
  Shape of reference tensor: (2, 2)
  Primary multi index:   rank = 1 dims = [2] indices = [[0], [1]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [2] indices = [[0], [1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing representation of forms
  
Compiler stage 2 finished in 0.0231409 seconds.

Compiler stage 3: Optimizing intermediate representation
--------------------------------------------------------
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  
Compiler stage 3 finished in 0.000519991 seconds.

Compiler stage 4: Generating code
---------------------------------
  Generating code for 1 elements
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: K_00
  Removing unused variable: detJ
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Generating code for 1 dofmaps
  Generating code for integrals
  Removing unused variable: K_00
  Removing unused variable: K_00
  Removing unused variable: detJ
  Removing unused variable: J_00
  Removing unused variable: x
  Generating code for forms
  
Compiler stage 4 finished in 0.052779 seconds.

Compiler stage 4.1: Generating additional wrapper code
------------------------------------------------------
  Generating wrapper code for DOLFIN
  
Compiler stage 4.1 finished in 0.00253296 seconds.

Compiler stage 5: Formatting code
---------------------------------
  Output written to ./Poisson.h.
  
Compiler stage 5 finished in 0.00122905 seconds.

[1;37;32mFFC finished in 0.109299 seconds.[0m
