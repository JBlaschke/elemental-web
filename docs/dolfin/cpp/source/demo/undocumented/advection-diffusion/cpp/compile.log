This is FFC, the FEniCS Form Compiler, version 0.9.10.
For further information, visit http://www.fenics.org/ffc/.

Compiling form AdvectionDiffusion

Compiler stage 1: Analyzing form(s)
-----------------------------------
  
  Name:                             'a'
  Rank:                             2
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           1
  Number of cell domains:           1
  Number of exterior facet domains: 0
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0, v_1]'
  Coefficients:                     '[w_0]'
  Argument names:                   '[v, u]'
  Coefficient names:                '[b]'
  Unique elements:                  'CG1(?), Vector<2 x CG2(?)>'
  Unique sub elements:              'CG1(?), Vector<2 x CG2(?)>, CG2(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  
  Name:                             'L'
  Rank:                             1
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           3
  Number of cell domains:           1
  Number of exterior facet domains: 0
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0]'
  Coefficients:                     '[w_0, w_1, w_2]'
  Argument names:                   '[v]'
  Coefficient names:                '[u0, b, f]'
  Unique elements:                  'CG1(?), Vector<2 x CG2(?)>'
  Unique sub elements:              'CG1(?), Vector<2 x CG2(?)>, CG2(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 3
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  
Compiler stage 1 finished in 0.071872 seconds.

Compiler stage 2: Computing intermediate representation
-------------------------------------------------------
  Computing representation of 3 elements
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing representation of 3 dofmaps
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing representation of integrals
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.00199 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 0 dims = [] indices = [[]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 0 dims = [] indices = [[]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  432 entries computed in 0.00632 seconds
  Shape of reference tensor: (3, 3, 12, 2, 2)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 3 dims = [12, 2, 2] indices = [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [2, 0, 0], [2, 0, 1], [2, 1, 0], [2, 1, 1], [3, 0, 0], [3, 0, 1], [3, 1, 0], [3, 1, 1], [4, 0, 0], [4, 0, 1], [4, 1, 0], [4, 1, 1], [5, 0, 0], [5, 0, 1], [5, 1, 0], [5, 1, 1], [6, 0, 0], [6, 0, 1], [6, 1, 0], [6, 1, 1], [7, 0, 0], [7, 0, 1], [7, 1, 0], [7, 1, 1], [8, 0, 0], [8, 0, 1], [8, 1, 0], [8, 1, 1], [9, 0, 0], [9, 0, 1], [9, 1, 0], [9, 1, 1], [10, 0, 0], [10, 0, 1], [10, 1, 0], [10, 1, 1], [11, 0, 0], [11, 0, 1], [11, 1, 0], [11, 1, 1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 3 dims = [12, 2, 2] indices = [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [2, 0, 0], [2, 0, 1], [2, 1, 0], [2, 1, 1], [3, 0, 0], [3, 0, 1], [3, 1, 0], [3, 1, 1], [4, 0, 0], [4, 0, 1], [4, 1, 0], [4, 1, 1], [5, 0, 0], [5, 0, 1], [5, 1, 0], [5, 1, 1], [6, 0, 0], [6, 0, 1], [6, 1, 0], [6, 1, 1], [7, 0, 0], [7, 0, 1], [7, 1, 0], [7, 1, 1], [8, 0, 0], [8, 0, 1], [8, 1, 0], [8, 1, 1], [9, 0, 0], [9, 0, 1], [9, 1, 0], [9, 1, 1], [10, 0, 0], [10, 0, 1], [10, 1, 0], [10, 1, 1], [11, 0, 0], [11, 0, 1], [11, 1, 0], [11, 1, 1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  36 entries computed in 0.00203 seconds
  Shape of reference tensor: (3, 3, 2, 2)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  External multi index:  rank = 1 dims = [2] indices = [[0], [1]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.00145 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.0015 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  432 entries computed in 0.00704 seconds
  Shape of reference tensor: (3, 12, 2, 3, 2)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 4 dims = [12, 2, 3, 2] indices = [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 1], [0, 0, 2, 0], [0, 0, 2, 1], [0, 1, 0, 0], [0, 1, 0, 1], [0, 1, 1, 0], [0, 1, 1, 1], [0, 1, 2, 0], [0, 1, 2, 1], [1, 0, 0, 0], [1, 0, 0, 1], [1, 0, 1, 0], [1, 0, 1, 1], [1, 0, 2, 0], [1, 0, 2, 1], [1, 1, 0, 0], [1, 1, 0, 1], [1, 1, 1, 0], [1, 1, 1, 1], [1, 1, 2, 0], [1, 1, 2, 1], [2, 0, 0, 0], [2, 0, 0, 1], [2, 0, 1, 0], [2, 0, 1, 1], [2, 0, 2, 0], [2, 0, 2, 1], [2, 1, 0, 0], [2, 1, 0, 1], [2, 1, 1, 0], [2, 1, 1, 1], [2, 1, 2, 0], [2, 1, 2, 1], [3, 0, 0, 0], [3, 0, 0, 1], [3, 0, 1, 0], [3, 0, 1, 1], [3, 0, 2, 0], [3, 0, 2, 1], [3, 1, 0, 0], [3, 1, 0, 1], [3, 1, 1, 0], [3, 1, 1, 1], [3, 1, 2, 0], [3, 1, 2, 1], [4, 0, 0, 0], [4, 0, 0, 1], [4, 0, 1, 0], [4, 0, 1, 1], [4, 0, 2, 0], [4, 0, 2, 1], [4, 1, 0, 0], [4, 1, 0, 1], [4, 1, 1, 0], [4, 1, 1, 1], [4, 1, 2, 0], [4, 1, 2, 1], [5, 0, 0, 0], [5, 0, 0, 1], [5, 0, 1, 0], [5, 0, 1, 1], [5, 0, 2, 0], [5, 0, 2, 1], [5, 1, 0, 0], [5, 1, 0, 1], [5, 1, 1, 0], [5, 1, 1, 1], [5, 1, 2, 0], [5, 1, 2, 1], [6, 0, 0, 0], [6, 0, 0, 1], [6, 0, 1, 0], [6, 0, 1, 1], [6, 0, 2, 0], [6, 0, 2, 1], [6, 1, 0, 0], [6, 1, 0, 1], [6, 1, 1, 0], [6, 1, 1, 1], [6, 1, 2, 0], [6, 1, 2, 1], [7, 0, 0, 0], [7, 0, 0, 1], [7, 0, 1, 0], [7, 0, 1, 1], [7, 0, 2, 0], [7, 0, 2, 1], [7, 1, 0, 0], [7, 1, 0, 1], [7, 1, 1, 0], [7, 1, 1, 1], [7, 1, 2, 0], [7, 1, 2, 1], [8, 0, 0, 0], [8, 0, 0, 1], [8, 0, 1, 0], [8, 0, 1, 1], [8, 0, 2, 0], [8, 0, 2, 1], [8, 1, 0, 0], [8, 1, 0, 1], [8, 1, 1, 0], [8, 1, 1, 1], [8, 1, 2, 0], [8, 1, 2, 1], [9, 0, 0, 0], [9, 0, 0, 1], [9, 0, 1, 0], [9, 0, 1, 1], [9, 0, 2, 0], [9, 0, 2, 1], [9, 1, 0, 0], [9, 1, 0, 1], [9, 1, 1, 0], [9, 1, 1, 1], [9, 1, 2, 0], [9, 1, 2, 1], [10, 0, 0, 0], [10, 0, 0, 1], [10, 0, 1, 0], [10, 0, 1, 1], [10, 0, 2, 0], [10, 0, 2, 1], [10, 1, 0, 0], [10, 1, 0, 1], [10, 1, 1, 0], [10, 1, 1, 1], [10, 1, 2, 0], [10, 1, 2, 1], [11, 0, 0, 0], [11, 0, 0, 1], [11, 0, 1, 0], [11, 0, 1, 1], [11, 0, 2, 0], [11, 0, 2, 1], [11, 1, 0, 0], [11, 1, 0, 1], [11, 1, 1, 0], [11, 1, 1, 1], [11, 1, 2, 0], [11, 1, 2, 1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 4 dims = [12, 2, 3, 2] indices = [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 1], [0, 0, 2, 0], [0, 0, 2, 1], [0, 1, 0, 0], [0, 1, 0, 1], [0, 1, 1, 0], [0, 1, 1, 1], [0, 1, 2, 0], [0, 1, 2, 1], [1, 0, 0, 0], [1, 0, 0, 1], [1, 0, 1, 0], [1, 0, 1, 1], [1, 0, 2, 0], [1, 0, 2, 1], [1, 1, 0, 0], [1, 1, 0, 1], [1, 1, 1, 0], [1, 1, 1, 1], [1, 1, 2, 0], [1, 1, 2, 1], [2, 0, 0, 0], [2, 0, 0, 1], [2, 0, 1, 0], [2, 0, 1, 1], [2, 0, 2, 0], [2, 0, 2, 1], [2, 1, 0, 0], [2, 1, 0, 1], [2, 1, 1, 0], [2, 1, 1, 1], [2, 1, 2, 0], [2, 1, 2, 1], [3, 0, 0, 0], [3, 0, 0, 1], [3, 0, 1, 0], [3, 0, 1, 1], [3, 0, 2, 0], [3, 0, 2, 1], [3, 1, 0, 0], [3, 1, 0, 1], [3, 1, 1, 0], [3, 1, 1, 1], [3, 1, 2, 0], [3, 1, 2, 1], [4, 0, 0, 0], [4, 0, 0, 1], [4, 0, 1, 0], [4, 0, 1, 1], [4, 0, 2, 0], [4, 0, 2, 1], [4, 1, 0, 0], [4, 1, 0, 1], [4, 1, 1, 0], [4, 1, 1, 1], [4, 1, 2, 0], [4, 1, 2, 1], [5, 0, 0, 0], [5, 0, 0, 1], [5, 0, 1, 0], [5, 0, 1, 1], [5, 0, 2, 0], [5, 0, 2, 1], [5, 1, 0, 0], [5, 1, 0, 1], [5, 1, 1, 0], [5, 1, 1, 1], [5, 1, 2, 0], [5, 1, 2, 1], [6, 0, 0, 0], [6, 0, 0, 1], [6, 0, 1, 0], [6, 0, 1, 1], [6, 0, 2, 0], [6, 0, 2, 1], [6, 1, 0, 0], [6, 1, 0, 1], [6, 1, 1, 0], [6, 1, 1, 1], [6, 1, 2, 0], [6, 1, 2, 1], [7, 0, 0, 0], [7, 0, 0, 1], [7, 0, 1, 0], [7, 0, 1, 1], [7, 0, 2, 0], [7, 0, 2, 1], [7, 1, 0, 0], [7, 1, 0, 1], [7, 1, 1, 0], [7, 1, 1, 1], [7, 1, 2, 0], [7, 1, 2, 1], [8, 0, 0, 0], [8, 0, 0, 1], [8, 0, 1, 0], [8, 0, 1, 1], [8, 0, 2, 0], [8, 0, 2, 1], [8, 1, 0, 0], [8, 1, 0, 1], [8, 1, 1, 0], [8, 1, 1, 1], [8, 1, 2, 0], [8, 1, 2, 1], [9, 0, 0, 0], [9, 0, 0, 1], [9, 0, 1, 0], [9, 0, 1, 1], [9, 0, 2, 0], [9, 0, 2, 1], [9, 1, 0, 0], [9, 1, 0, 1], [9, 1, 1, 0], [9, 1, 1, 1], [9, 1, 2, 0], [9, 1, 2, 1], [10, 0, 0, 0], [10, 0, 0, 1], [10, 0, 1, 0], [10, 0, 1, 1], [10, 0, 2, 0], [10, 0, 2, 1], [10, 1, 0, 0], [10, 1, 0, 1], [10, 1, 1, 0], [10, 1, 1, 1], [10, 1, 2, 0], [10, 1, 2, 1], [11, 0, 0, 0], [11, 0, 0, 1], [11, 0, 1, 0], [11, 0, 1, 1], [11, 0, 2, 0], [11, 0, 2, 1], [11, 1, 0, 0], [11, 1, 0, 1], [11, 1, 1, 0], [11, 1, 1, 1], [11, 1, 2, 0], [11, 1, 2, 1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  36 entries computed in 0.00253 seconds
  Shape of reference tensor: (3, 2, 3, 2)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 3 dims = [2, 3, 2] indices = [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [1, 2, 0], [1, 2, 1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 3 dims = [2, 3, 2] indices = [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [1, 2, 0], [1, 2, 1]]
  External multi index:  rank = 1 dims = [2] indices = [[0], [1]]
  Computing representation of forms
  
Compiler stage 2 finished in 0.048497 seconds.

Compiler stage 3: Optimizing intermediate representation
--------------------------------------------------------
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  
Compiler stage 3 finished in 0.000504017 seconds.

Compiler stage 4: Generating code
---------------------------------
  Generating code for 3 elements
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Generating code for 3 dofmaps
  Generating code for integrals
  Generating code for forms
  
Compiler stage 4 finished in 0.83242 seconds.

Compiler stage 4.1: Generating additional wrapper code
------------------------------------------------------
  Generating wrapper code for DOLFIN
  
Compiler stage 4.1 finished in 0.00319099 seconds.

Compiler stage 5: Formatting code
---------------------------------
  Output written to ./AdvectionDiffusion.h.
  
Compiler stage 5 finished in 0.00355911 seconds.

[1;37;32mFFC finished in 0.960699 seconds.[0m
This is FFC, the FEniCS Form Compiler, version 0.9.10.
For further information, visit http://www.fenics.org/ffc/.

Compiling element Velocity

Compiler stage 1: Analyzing form(s)
-----------------------------------
  
Compiler stage 1 finished in 0.000360012 seconds.

Compiler stage 2: Computing intermediate representation
-------------------------------------------------------
  Computing representation of 2 elements
  Reusing element from cache
  Reusing element from cache
  Computing representation of 2 dofmaps
  Reusing element from cache
  Reusing element from cache
  Computing representation of integrals
  Computing representation of forms
  
Compiler stage 2 finished in 0.032532 seconds.

Compiler stage 3: Optimizing intermediate representation
--------------------------------------------------------
  
Compiler stage 3 finished in 0.000272989 seconds.

Compiler stage 4: Generating code
---------------------------------
  Generating code for 2 elements
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Generating code for 2 dofmaps
  Generating code for integrals
  Generating code for forms
  
Compiler stage 4 finished in 0.666121 seconds.

Compiler stage 4.1: Generating additional wrapper code
------------------------------------------------------
  Generating wrapper code for DOLFIN
  
Compiler stage 4.1 finished in 0.00183702 seconds.

Compiler stage 5: Formatting code
---------------------------------
  Output written to ./Velocity.h.
  
Compiler stage 5 finished in 0.00221205 seconds.

[1;37;32mFFC finished in 0.703939 seconds.[0m
This is FFC, the FEniCS Form Compiler, version 0.9.10.
For further information, visit http://www.fenics.org/ffc/.

Compiling form AdvectionDiffusion

Compiler stage 1: Analyzing form(s)
-----------------------------------
  
  Name:                             'a'
  Rank:                             2
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           1
  Number of cell domains:           1
  Number of exterior facet domains: 0
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0, v_1]'
  Coefficients:                     '[w_0]'
  Argument names:                   '[v, u]'
  Coefficient names:                '[b]'
  Unique elements:                  'CG1(?), Vector<2 x CG2(?)>'
  Unique sub elements:              'CG1(?), Vector<2 x CG2(?)>, CG2(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  
  Name:                             'L'
  Rank:                             1
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           3
  Number of cell domains:           1
  Number of exterior facet domains: 0
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0]'
  Coefficients:                     '[w_0, w_1, w_2]'
  Argument names:                   '[v]'
  Coefficient names:                '[u0, b, f]'
  Unique elements:                  'CG1(?), Vector<2 x CG2(?)>'
  Unique sub elements:              'CG1(?), Vector<2 x CG2(?)>, CG2(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 3
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  
Compiler stage 1 finished in 0.0613508 seconds.

Compiler stage 2: Computing intermediate representation
-------------------------------------------------------
  Computing representation of 3 elements
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing representation of 3 dofmaps
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing representation of integrals
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.00169 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 0 dims = [] indices = [[]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 0 dims = [] indices = [[]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  432 entries computed in 0.00553 seconds
  Shape of reference tensor: (3, 3, 12, 2, 2)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 3 dims = [12, 2, 2] indices = [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [2, 0, 0], [2, 0, 1], [2, 1, 0], [2, 1, 1], [3, 0, 0], [3, 0, 1], [3, 1, 0], [3, 1, 1], [4, 0, 0], [4, 0, 1], [4, 1, 0], [4, 1, 1], [5, 0, 0], [5, 0, 1], [5, 1, 0], [5, 1, 1], [6, 0, 0], [6, 0, 1], [6, 1, 0], [6, 1, 1], [7, 0, 0], [7, 0, 1], [7, 1, 0], [7, 1, 1], [8, 0, 0], [8, 0, 1], [8, 1, 0], [8, 1, 1], [9, 0, 0], [9, 0, 1], [9, 1, 0], [9, 1, 1], [10, 0, 0], [10, 0, 1], [10, 1, 0], [10, 1, 1], [11, 0, 0], [11, 0, 1], [11, 1, 0], [11, 1, 1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 3 dims = [12, 2, 2] indices = [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [2, 0, 0], [2, 0, 1], [2, 1, 0], [2, 1, 1], [3, 0, 0], [3, 0, 1], [3, 1, 0], [3, 1, 1], [4, 0, 0], [4, 0, 1], [4, 1, 0], [4, 1, 1], [5, 0, 0], [5, 0, 1], [5, 1, 0], [5, 1, 1], [6, 0, 0], [6, 0, 1], [6, 1, 0], [6, 1, 1], [7, 0, 0], [7, 0, 1], [7, 1, 0], [7, 1, 1], [8, 0, 0], [8, 0, 1], [8, 1, 0], [8, 1, 1], [9, 0, 0], [9, 0, 1], [9, 1, 0], [9, 1, 1], [10, 0, 0], [10, 0, 1], [10, 1, 0], [10, 1, 1], [11, 0, 0], [11, 0, 1], [11, 1, 0], [11, 1, 1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  36 entries computed in 0.00207 seconds
  Shape of reference tensor: (3, 3, 2, 2)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  External multi index:  rank = 1 dims = [2] indices = [[0], [1]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.00141 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.00147 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  432 entries computed in 0.00585 seconds
  Shape of reference tensor: (3, 12, 2, 3, 2)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 4 dims = [12, 2, 3, 2] indices = [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 1], [0, 0, 2, 0], [0, 0, 2, 1], [0, 1, 0, 0], [0, 1, 0, 1], [0, 1, 1, 0], [0, 1, 1, 1], [0, 1, 2, 0], [0, 1, 2, 1], [1, 0, 0, 0], [1, 0, 0, 1], [1, 0, 1, 0], [1, 0, 1, 1], [1, 0, 2, 0], [1, 0, 2, 1], [1, 1, 0, 0], [1, 1, 0, 1], [1, 1, 1, 0], [1, 1, 1, 1], [1, 1, 2, 0], [1, 1, 2, 1], [2, 0, 0, 0], [2, 0, 0, 1], [2, 0, 1, 0], [2, 0, 1, 1], [2, 0, 2, 0], [2, 0, 2, 1], [2, 1, 0, 0], [2, 1, 0, 1], [2, 1, 1, 0], [2, 1, 1, 1], [2, 1, 2, 0], [2, 1, 2, 1], [3, 0, 0, 0], [3, 0, 0, 1], [3, 0, 1, 0], [3, 0, 1, 1], [3, 0, 2, 0], [3, 0, 2, 1], [3, 1, 0, 0], [3, 1, 0, 1], [3, 1, 1, 0], [3, 1, 1, 1], [3, 1, 2, 0], [3, 1, 2, 1], [4, 0, 0, 0], [4, 0, 0, 1], [4, 0, 1, 0], [4, 0, 1, 1], [4, 0, 2, 0], [4, 0, 2, 1], [4, 1, 0, 0], [4, 1, 0, 1], [4, 1, 1, 0], [4, 1, 1, 1], [4, 1, 2, 0], [4, 1, 2, 1], [5, 0, 0, 0], [5, 0, 0, 1], [5, 0, 1, 0], [5, 0, 1, 1], [5, 0, 2, 0], [5, 0, 2, 1], [5, 1, 0, 0], [5, 1, 0, 1], [5, 1, 1, 0], [5, 1, 1, 1], [5, 1, 2, 0], [5, 1, 2, 1], [6, 0, 0, 0], [6, 0, 0, 1], [6, 0, 1, 0], [6, 0, 1, 1], [6, 0, 2, 0], [6, 0, 2, 1], [6, 1, 0, 0], [6, 1, 0, 1], [6, 1, 1, 0], [6, 1, 1, 1], [6, 1, 2, 0], [6, 1, 2, 1], [7, 0, 0, 0], [7, 0, 0, 1], [7, 0, 1, 0], [7, 0, 1, 1], [7, 0, 2, 0], [7, 0, 2, 1], [7, 1, 0, 0], [7, 1, 0, 1], [7, 1, 1, 0], [7, 1, 1, 1], [7, 1, 2, 0], [7, 1, 2, 1], [8, 0, 0, 0], [8, 0, 0, 1], [8, 0, 1, 0], [8, 0, 1, 1], [8, 0, 2, 0], [8, 0, 2, 1], [8, 1, 0, 0], [8, 1, 0, 1], [8, 1, 1, 0], [8, 1, 1, 1], [8, 1, 2, 0], [8, 1, 2, 1], [9, 0, 0, 0], [9, 0, 0, 1], [9, 0, 1, 0], [9, 0, 1, 1], [9, 0, 2, 0], [9, 0, 2, 1], [9, 1, 0, 0], [9, 1, 0, 1], [9, 1, 1, 0], [9, 1, 1, 1], [9, 1, 2, 0], [9, 1, 2, 1], [10, 0, 0, 0], [10, 0, 0, 1], [10, 0, 1, 0], [10, 0, 1, 1], [10, 0, 2, 0], [10, 0, 2, 1], [10, 1, 0, 0], [10, 1, 0, 1], [10, 1, 1, 0], [10, 1, 1, 1], [10, 1, 2, 0], [10, 1, 2, 1], [11, 0, 0, 0], [11, 0, 0, 1], [11, 0, 1, 0], [11, 0, 1, 1], [11, 0, 2, 0], [11, 0, 2, 1], [11, 1, 0, 0], [11, 1, 0, 1], [11, 1, 1, 0], [11, 1, 1, 1], [11, 1, 2, 0], [11, 1, 2, 1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 4 dims = [12, 2, 3, 2] indices = [[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 1], [0, 0, 2, 0], [0, 0, 2, 1], [0, 1, 0, 0], [0, 1, 0, 1], [0, 1, 1, 0], [0, 1, 1, 1], [0, 1, 2, 0], [0, 1, 2, 1], [1, 0, 0, 0], [1, 0, 0, 1], [1, 0, 1, 0], [1, 0, 1, 1], [1, 0, 2, 0], [1, 0, 2, 1], [1, 1, 0, 0], [1, 1, 0, 1], [1, 1, 1, 0], [1, 1, 1, 1], [1, 1, 2, 0], [1, 1, 2, 1], [2, 0, 0, 0], [2, 0, 0, 1], [2, 0, 1, 0], [2, 0, 1, 1], [2, 0, 2, 0], [2, 0, 2, 1], [2, 1, 0, 0], [2, 1, 0, 1], [2, 1, 1, 0], [2, 1, 1, 1], [2, 1, 2, 0], [2, 1, 2, 1], [3, 0, 0, 0], [3, 0, 0, 1], [3, 0, 1, 0], [3, 0, 1, 1], [3, 0, 2, 0], [3, 0, 2, 1], [3, 1, 0, 0], [3, 1, 0, 1], [3, 1, 1, 0], [3, 1, 1, 1], [3, 1, 2, 0], [3, 1, 2, 1], [4, 0, 0, 0], [4, 0, 0, 1], [4, 0, 1, 0], [4, 0, 1, 1], [4, 0, 2, 0], [4, 0, 2, 1], [4, 1, 0, 0], [4, 1, 0, 1], [4, 1, 1, 0], [4, 1, 1, 1], [4, 1, 2, 0], [4, 1, 2, 1], [5, 0, 0, 0], [5, 0, 0, 1], [5, 0, 1, 0], [5, 0, 1, 1], [5, 0, 2, 0], [5, 0, 2, 1], [5, 1, 0, 0], [5, 1, 0, 1], [5, 1, 1, 0], [5, 1, 1, 1], [5, 1, 2, 0], [5, 1, 2, 1], [6, 0, 0, 0], [6, 0, 0, 1], [6, 0, 1, 0], [6, 0, 1, 1], [6, 0, 2, 0], [6, 0, 2, 1], [6, 1, 0, 0], [6, 1, 0, 1], [6, 1, 1, 0], [6, 1, 1, 1], [6, 1, 2, 0], [6, 1, 2, 1], [7, 0, 0, 0], [7, 0, 0, 1], [7, 0, 1, 0], [7, 0, 1, 1], [7, 0, 2, 0], [7, 0, 2, 1], [7, 1, 0, 0], [7, 1, 0, 1], [7, 1, 1, 0], [7, 1, 1, 1], [7, 1, 2, 0], [7, 1, 2, 1], [8, 0, 0, 0], [8, 0, 0, 1], [8, 0, 1, 0], [8, 0, 1, 1], [8, 0, 2, 0], [8, 0, 2, 1], [8, 1, 0, 0], [8, 1, 0, 1], [8, 1, 1, 0], [8, 1, 1, 1], [8, 1, 2, 0], [8, 1, 2, 1], [9, 0, 0, 0], [9, 0, 0, 1], [9, 0, 1, 0], [9, 0, 1, 1], [9, 0, 2, 0], [9, 0, 2, 1], [9, 1, 0, 0], [9, 1, 0, 1], [9, 1, 1, 0], [9, 1, 1, 1], [9, 1, 2, 0], [9, 1, 2, 1], [10, 0, 0, 0], [10, 0, 0, 1], [10, 0, 1, 0], [10, 0, 1, 1], [10, 0, 2, 0], [10, 0, 2, 1], [10, 1, 0, 0], [10, 1, 0, 1], [10, 1, 1, 0], [10, 1, 1, 1], [10, 1, 2, 0], [10, 1, 2, 1], [11, 0, 0, 0], [11, 0, 0, 1], [11, 0, 1, 0], [11, 0, 1, 1], [11, 0, 2, 0], [11, 0, 2, 1], [11, 1, 0, 0], [11, 1, 0, 1], [11, 1, 1, 0], [11, 1, 1, 1], [11, 1, 2, 0], [11, 1, 2, 1]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  36 entries computed in 0.00204 seconds
  Shape of reference tensor: (3, 2, 3, 2)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 3 dims = [2, 3, 2] indices = [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [1, 2, 0], [1, 2, 1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 3 dims = [2, 3, 2] indices = [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [0, 2, 0], [0, 2, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [1, 2, 0], [1, 2, 1]]
  External multi index:  rank = 1 dims = [2] indices = [[0], [1]]
  Computing representation of forms
  
Compiler stage 2 finished in 0.041702 seconds.

Compiler stage 3: Optimizing intermediate representation
--------------------------------------------------------
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  
Compiler stage 3 finished in 0.000535011 seconds.

Compiler stage 4: Generating code
---------------------------------
  Generating code for 3 elements
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Generating code for 3 dofmaps
  Generating code for integrals
  Generating code for forms
  
Compiler stage 4 finished in 0.746754 seconds.

Compiler stage 4.1: Generating additional wrapper code
------------------------------------------------------
  Generating wrapper code for DOLFIN
  
Compiler stage 4.1 finished in 0.00258422 seconds.

Compiler stage 5: Formatting code
---------------------------------
  Output written to ./AdvectionDiffusion.h.
  
Compiler stage 5 finished in 0.00286818 seconds.

[1;37;32mFFC finished in 0.856369 seconds.[0m
This is FFC, the FEniCS Form Compiler, version 0.9.10.
For further information, visit http://www.fenics.org/ffc/.

Compiling element Velocity

Compiler stage 1: Analyzing form(s)
-----------------------------------
  
Compiler stage 1 finished in 0.000337124 seconds.

Compiler stage 2: Computing intermediate representation
-------------------------------------------------------
  Computing representation of 2 elements
  Reusing element from cache
  Reusing element from cache
  Computing representation of 2 dofmaps
  Reusing element from cache
  Reusing element from cache
  Computing representation of integrals
  Computing representation of forms
  
Compiler stage 2 finished in 0.0345018 seconds.

Compiler stage 3: Optimizing intermediate representation
--------------------------------------------------------
  
Compiler stage 3 finished in 0.000252008 seconds.

Compiler stage 4: Generating code
---------------------------------
  Generating code for 2 elements
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Generating code for 2 dofmaps
  Generating code for integrals
  Generating code for forms
  
Compiler stage 4 finished in 0.65083 seconds.

Compiler stage 4.1: Generating additional wrapper code
------------------------------------------------------
  Generating wrapper code for DOLFIN
  
Compiler stage 4.1 finished in 0.0020051 seconds.

Compiler stage 5: Formatting code
---------------------------------
  Output written to ./Velocity.h.
  
Compiler stage 5 finished in 0.00250506 seconds.

[1;37;32mFFC finished in 0.691021 seconds.[0m
