This is FFC, the FEniCS Form Compiler, version 0.9.10.
For further information, visit http://www.fenics.org/ffc/.

Compiling form Projection

Compiler stage 1: Analyzing form(s)
-----------------------------------
  
  Name:                             'a'
  Rank:                             2
  Cell:                             <tetrahedron cell in R3>
  Topological dimension:            3
  Geometric dimension:              3
  Number of facets:                 4
  Number of coefficients:           0
  Number of cell domains:           1
  Number of exterior facet domains: 0
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0, v_1]'
  Coefficients:                     '[]'
  Argument names:                   '[v, u]'
  Coefficient names:                '[]'
  Unique elements:                  'CG2(?)'
  Unique sub elements:              'CG2(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 0
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 4
  quadrature_degree: auto --> 4
  quadrature_rule:   auto --> default
  
  Name:                             'L'
  Rank:                             1
  Cell:                             <tetrahedron cell in R3>
  Topological dimension:            3
  Geometric dimension:              3
  Number of facets:                 4
  Number of coefficients:           1
  Number of cell domains:           1
  Number of exterior facet domains: 0
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0]'
  Coefficients:                     '[w_0]'
  Argument names:                   '[v]'
  Coefficient names:                '[f]'
  Unique elements:                  'CG2(?)'
  Unique sub elements:              'CG2(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 4
  quadrature_degree: auto --> 4
  quadrature_rule:   auto --> default
  
Compiler stage 1 finished in 0.0592661 seconds.

Compiler stage 2: Computing intermediate representation
-------------------------------------------------------
  Computing representation of 1 elements
  Reusing element from cache
  Computing representation of 1 dofmaps
  Reusing element from cache
  Computing representation of integrals
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  100 entries computed in 0.00524 seconds
  Shape of reference tensor: (10, 10)
  Primary multi index:   rank = 2 dims = [10, 10] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9]]
  Secondary multi index: rank = 0 dims = [] indices = [[]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 0 dims = [] indices = [[]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  100 entries computed in 0.00394 seconds
  Shape of reference tensor: (10, 10)
  Primary multi index:   rank = 1 dims = [10] indices = [[0], [1], [2], [3], [4], [5], [6], [7], [8], [9]]
  Secondary multi index: rank = 1 dims = [10] indices = [[0], [1], [2], [3], [4], [5], [6], [7], [8], [9]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [10] indices = [[0], [1], [2], [3], [4], [5], [6], [7], [8], [9]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing representation of forms
  
Compiler stage 2 finished in 0.0246019 seconds.

Compiler stage 3: Optimizing intermediate representation
--------------------------------------------------------
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  
Compiler stage 3 finished in 0.000859976 seconds.

Compiler stage 4: Generating code
---------------------------------
  Generating code for 1 elements
  Removing unused variable: K_22
  Removing unused variable: K_21
  Removing unused variable: K_20
  Removing unused variable: K_12
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_02
  Removing unused variable: K_01
  Removing unused variable: K_00
  Generating code for 1 dofmaps
  Generating code for integrals
  Removing unused variable: K_22
  Removing unused variable: K_21
  Removing unused variable: K_20
  Removing unused variable: K_12
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_02
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: d_22
  Removing unused variable: d_21
  Removing unused variable: d_12
  Removing unused variable: d_11
  Removing unused variable: d_02
  Removing unused variable: d_01
  Removing unused variable: K_22
  Removing unused variable: K_21
  Removing unused variable: K_20
  Removing unused variable: K_12
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_02
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: d_22
  Removing unused variable: d_21
  Removing unused variable: d_12
  Removing unused variable: d_11
  Removing unused variable: d_02
  Removing unused variable: d_01
  Generating code for forms
  
Compiler stage 4 finished in 0.706472 seconds.

Compiler stage 4.1: Generating additional wrapper code
------------------------------------------------------
  Generating wrapper code for DOLFIN
  
Compiler stage 4.1 finished in 0.00269818 seconds.

Compiler stage 5: Formatting code
---------------------------------
  Output written to ./Projection.h.
  
Compiler stage 5 finished in 0.00260401 seconds.

[1;37;32mFFC finished in 0.79728 seconds.[0m
This is FFC, the FEniCS Form Compiler, version 0.9.10.
For further information, visit http://www.fenics.org/ffc/.

Compiling form Projection

Compiler stage 1: Analyzing form(s)
-----------------------------------
  
  Name:                             'a'
  Rank:                             2
  Cell:                             <tetrahedron cell in R3>
  Topological dimension:            3
  Geometric dimension:              3
  Number of facets:                 4
  Number of coefficients:           0
  Number of cell domains:           1
  Number of exterior facet domains: 0
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0, v_1]'
  Coefficients:                     '[]'
  Argument names:                   '[v, u]'
  Coefficient names:                '[]'
  Unique elements:                  'CG2(?)'
  Unique sub elements:              'CG2(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 0
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 4
  quadrature_degree: auto --> 4
  quadrature_rule:   auto --> default
  
  Name:                             'L'
  Rank:                             1
  Cell:                             <tetrahedron cell in R3>
  Topological dimension:            3
  Geometric dimension:              3
  Number of facets:                 4
  Number of coefficients:           1
  Number of cell domains:           1
  Number of exterior facet domains: 0
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0]'
  Coefficients:                     '[w_0]'
  Argument names:                   '[v]'
  Coefficient names:                '[f]'
  Unique elements:                  'CG2(?)'
  Unique sub elements:              'CG2(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 4
  quadrature_degree: auto --> 4
  quadrature_rule:   auto --> default
  
Compiler stage 1 finished in 0.0549169 seconds.

Compiler stage 2: Computing intermediate representation
-------------------------------------------------------
  Computing representation of 1 elements
  Reusing element from cache
  Computing representation of 1 dofmaps
  Reusing element from cache
  Computing representation of integrals
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  100 entries computed in 0.00349 seconds
  Shape of reference tensor: (10, 10)
  Primary multi index:   rank = 2 dims = [10, 10] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9], [3, 0], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9], [4, 0], [4, 1], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9], [5, 0], [5, 1], [5, 2], [5, 3], [5, 4], [5, 5], [5, 6], [5, 7], [5, 8], [5, 9], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [6, 6], [6, 7], [6, 8], [6, 9], [7, 0], [7, 1], [7, 2], [7, 3], [7, 4], [7, 5], [7, 6], [7, 7], [7, 8], [7, 9], [8, 0], [8, 1], [8, 2], [8, 3], [8, 4], [8, 5], [8, 6], [8, 7], [8, 8], [8, 9], [9, 0], [9, 1], [9, 2], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 8], [9, 9]]
  Secondary multi index: rank = 0 dims = [] indices = [[]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 0 dims = [] indices = [[]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  100 entries computed in 0.00333 seconds
  Shape of reference tensor: (10, 10)
  Primary multi index:   rank = 1 dims = [10] indices = [[0], [1], [2], [3], [4], [5], [6], [7], [8], [9]]
  Secondary multi index: rank = 1 dims = [10] indices = [[0], [1], [2], [3], [4], [5], [6], [7], [8], [9]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [10] indices = [[0], [1], [2], [3], [4], [5], [6], [7], [8], [9]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing representation of forms
  
Compiler stage 2 finished in 0.0210049 seconds.

Compiler stage 3: Optimizing intermediate representation
--------------------------------------------------------
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  
Compiler stage 3 finished in 0.000867128 seconds.

Compiler stage 4: Generating code
---------------------------------
  Generating code for 1 elements
  Removing unused variable: K_22
  Removing unused variable: K_21
  Removing unused variable: K_20
  Removing unused variable: K_12
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_02
  Removing unused variable: K_01
  Removing unused variable: K_00
  Generating code for 1 dofmaps
  Generating code for integrals
  Removing unused variable: K_22
  Removing unused variable: K_21
  Removing unused variable: K_20
  Removing unused variable: K_12
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_02
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: d_22
  Removing unused variable: d_21
  Removing unused variable: d_12
  Removing unused variable: d_11
  Removing unused variable: d_02
  Removing unused variable: d_01
  Removing unused variable: K_22
  Removing unused variable: K_21
  Removing unused variable: K_20
  Removing unused variable: K_12
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_02
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: d_22
  Removing unused variable: d_21
  Removing unused variable: d_12
  Removing unused variable: d_11
  Removing unused variable: d_02
  Removing unused variable: d_01
  Generating code for forms
  
Compiler stage 4 finished in 0.706069 seconds.

Compiler stage 4.1: Generating additional wrapper code
------------------------------------------------------
  Generating wrapper code for DOLFIN
  
Compiler stage 4.1 finished in 0.0024271 seconds.

Compiler stage 5: Formatting code
---------------------------------
  Output written to ./Projection.h.
  
Compiler stage 5 finished in 0.00236702 seconds.

[1;37;32mFFC finished in 0.788374 seconds.[0m
