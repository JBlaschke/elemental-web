This is FFC, the FEniCS Form Compiler, version 0.9.10.
For further information, visit http://www.fenics.org/ffc/.

Compiling form AdaptivePoisson

Compiler stage 1: Analyzing form(s)
-----------------------------------
  
  Name:                             'a'
  Rank:                             2
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           0
  Number of cell domains:           1
  Number of exterior facet domains: 0
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0, v_1]'
  Coefficients:                     '[]'
  Argument names:                   '[v, u]'
  Coefficient names:                '[]'
  Unique elements:                  'CG1(?)'
  Unique sub elements:              'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 0
  quadrature_degree: auto --> 0
  quadrature_rule:   auto --> default
  
  Name:                             'a'
  Rank:                             1
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           0
  Number of cell domains:           1
  Number of exterior facet domains: 0
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0]'
  Coefficients:                     '[]'
  Argument names:                   '[v0]'
  Coefficient names:                '[]'
  Unique elements:                  'CG1(?)'
  Unique sub elements:              'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 0
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 1
  quadrature_degree: auto --> 1
  quadrature_rule:   auto --> default
  
  Name:                             'a'
  Rank:                             0
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           4
  Number of cell domains:           1
  Number of exterior facet domains: 1
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[]'
  Coefficients:                     '[w_0, w_1, w_2, w_3]'
  Argument names:                   '[]'
  Coefficient names:                '[f, g, __discrete_primal_solution, __improved_d
                                    ual]'
  Unique elements:                  'CG1(?), CG2(?)'
  Unique sub elements:              'CG1(?), CG2(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 4
  representation:    auto --> quadrature
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  
  Name:                             'a'
  Rank:                             2
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           1
  Number of cell domains:           1
  Number of exterior facet domains: 0
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0, v_1]'
  Coefficients:                     '[w_0]'
  Argument names:                   '[v0, v1]'
  Coefficient names:                '[__cell_bubble]'
  Unique elements:                  'DG1(?), B3(?)'
  Unique sub elements:              'DG1(?), B3(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 5
  quadrature_degree: auto --> 5
  quadrature_rule:   auto --> default
  
  Name:                             'a'
  Rank:                             1
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           4
  Number of cell domains:           1
  Number of exterior facet domains: 1
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0]'
  Coefficients:                     '[w_0, w_1, w_2, w_3]'
  Argument names:                   '[v0]'
  Coefficient names:                '[f, g, __discrete_primal_solution, __cell_bubbl
                                    e]'
  Unique elements:                  'DG1(?), CG1(?), B3(?)'
  Unique sub elements:              'DG1(?), CG1(?), B3(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 4
  representation:    auto --> quadrature
  Selecting quadrature degree based on total polynomial degree of integrand: 5
  quadrature_degree: auto --> 5
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 5
  quadrature_degree: auto --> 5
  quadrature_rule:   auto --> default
  
  Name:                             'a'
  Rank:                             2
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           1
  Number of cell domains:           0
  Number of exterior facet domains: 1
  Number or interior facet domains: 1
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0, v_1]'
  Coefficients:                     '[w_0]'
  Argument names:                   '[v0, v1]'
  Coefficient names:                '[__cell_cone]'
  Unique elements:                  'DG1(?), DG2(?)'
  Unique sub elements:              'DG1(?), DG2(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 4
  quadrature_degree: auto --> 4
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 4
  quadrature_degree: auto --> 4
  quadrature_rule:   auto --> default
  
  Name:                             'a'
  Rank:                             1
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           5
  Number of cell domains:           1
  Number of exterior facet domains: 1
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0]'
  Coefficients:                     '[w_0, w_1, w_2, w_3, w_4]'
  Argument names:                   '[v0]'
  Coefficient names:                '[f, g, __discrete_primal_solution, __cell_resid
                                    ual, __cell_cone]'
  Unique elements:                  'DG1(?), CG1(?), DG2(?)'
  Unique sub elements:              'DG1(?), CG1(?), DG2(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 4
  representation:    auto --> quadrature
  Selecting quadrature degree based on total polynomial degree of integrand: 4
  quadrature_degree: auto --> 4
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 4
  quadrature_degree: auto --> 4
  quadrature_rule:   auto --> default
  
  Name:                             'a'
  Rank:                             1
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           4
  Number of cell domains:           1
  Number of exterior facet domains: 1
  Number or interior facet domains: 1
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0]'
  Coefficients:                     '[w_0, w_1, w_2, w_3]'
  Argument names:                   '[v0]'
  Coefficient names:                '[__improved_dual, __cell_residual, __facet_resi
                                    dual, __discrete_dual_solution]'
  Unique elements:                  'DG0(?), CG2(?), DG1(?), CG1(?)'
  Unique sub elements:              'DG0(?), CG2(?), DG1(?), CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  
  Name:                             'a'
  Rank:                             2
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           0
  Number of cell domains:           1
  Number of exterior facet domains: 0
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0, v_1]'
  Coefficients:                     '[]'
  Argument names:                   '[v, u]'
  Coefficient names:                '[]'
  Unique elements:                  'CG1(?)'
  Unique sub elements:              'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 0
  quadrature_degree: auto --> 0
  quadrature_rule:   auto --> default
  
  Name:                             'L'
  Rank:                             1
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           2
  Number of cell domains:           1
  Number of exterior facet domains: 1
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0]'
  Coefficients:                     '[w_0, w_1]'
  Argument names:                   '[v]'
  Coefficient names:                '[f, g]'
  Unique elements:                  'CG1(?)'
  Unique sub elements:              'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 2
  quadrature_degree: auto --> 2
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 2
  quadrature_degree: auto --> 2
  quadrature_rule:   auto --> default
  
  Name:                             'a'
  Rank:                             0
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           1
  Number of cell domains:           1
  Number of exterior facet domains: 0
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[]'
  Coefficients:                     '[w_0]'
  Argument names:                   '[]'
  Coefficient names:                '[__discrete_primal_solution]'
  Unique elements:                  'CG1(?)'
  Unique sub elements:              'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 1
  quadrature_degree: auto --> 1
  quadrature_rule:   auto --> default
  
Compiler stage 1 finished in 0.159566 seconds.

Compiler stage 2: Computing intermediate representation
-------------------------------------------------------
  Computing representation of 6 elements
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing representation of 6 dofmaps
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing representation of integrals
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  36 entries computed in 0.00144 seconds
  Shape of reference tensor: (3, 3, 2, 2)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  External multi index:  rank = 1 dims = [2] indices = [[0], [1]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  3 entries computed in 0.00105 seconds
  Shape of reference tensor: (3,)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 0 dims = [] indices = [[]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 0 dims = [] indices = [[]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing quadrature representation
  Reusing element from cache
  Reusing element from cache
  
  QG-utils, psi_tables:
  {6: {FiniteElement('Lagrange', Cell('triangle', Space(2)), 2, None): {None: {(0, 1): array([[0.563843963708, 0.0722665257879, 0.563843963708, -1.6361104895,
          0.0722665257879, -1.6361104895],
         [1.11022302463e-16, 0.0, 5.55111512313e-17, 0.0, -1.11022302463e-16,
          -2.77555756156e-17],
         [-0.0722665257879, -0.563843963708, 1.6361104895, -0.563843963708,
          1.6361104895, -0.0722665257879],
         [2.6361104895, 2.6361104895, 0.927733474212, 0.927733474212,
          0.436156036292, 0.436156036292],
         [-0.491577437921, 0.491577437921, -2.1999544532, 2.1999544532,
          -1.70837701528, 1.70837701528],
         [-2.6361104895, -2.6361104895, -0.927733474212, -0.927733474212,
          -0.436156036292, -0.436156036292]], dtype=object), (1, 0): array([[0.563843963708, 0.0722665257879, 0.563843963708, -1.6361104895,
          0.0722665257879, -1.6361104895],
         [1.6361104895, 1.6361104895, -0.0722665257879, -0.0722665257879,
          -0.563843963708, -0.563843963708],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
         [0.927733474212, 0.436156036292, 2.6361104895, 0.436156036292,
          2.6361104895, 0.927733474212],
         [-0.927733474212, -0.436156036292, -2.6361104895, -0.436156036292,
          -2.6361104895, -0.927733474212],
         [-2.1999544532, -1.70837701528, -0.491577437921, 1.70837701528,
          0.491577437921, 2.1999544532]], dtype=object), (0, 0): array([[-0.0852599980737, -0.124347193656, -0.0852599980737, 0.20960719173,
          -0.124347193656, 0.20960719173],
         [0.20960719173, 0.20960719173, -0.124347193656, -0.124347193656,
          -0.0852599980737, -0.0852599980737],
         [-0.124347193656, -0.0852599980737, 0.20960719173, -0.0852599980737,
          0.20960719173, -0.124347193656],
         [0.611401985707, 0.287438875581, 0.611401985707, 0.101159138712,
          0.287438875581, 0.101159138712],
         [0.101159138712, 0.101159138712, 0.287438875581, 0.287438875581,
          0.611401985707, 0.611401985707],
         [0.287438875581, 0.611401985707, 0.101159138712, 0.611401985707,
          0.101159138712, 0.287438875581]], dtype=object)}}, FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None): {None: {(0, 1): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [1.11022302463e-16, 1.11022302463e-16, 1.11022302463e-16,
          1.11022302463e-16, 1.11022302463e-16, 1.11022302463e-16],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], dtype=object), (1, 0): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=object), (0, 0): array([[0.109039009073, 0.231933368553, 0.109039009073, 0.659027622374,
          0.231933368553, 0.659027622374],
         [0.659027622374, 0.659027622374, 0.231933368553, 0.231933368553,
          0.109039009073, 0.109039009073],
         [0.231933368553, 0.109039009073, 0.659027622374, 0.109039009073,
          0.659027622374, 0.231933368553]], dtype=object)}}}}
  
  QG-utils, psi_tables, flat_tables:
  {'FE0_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0_D01': array([[-1.0, 1.11022302463e-16, 1.0],
         [-1.0, 1.11022302463e-16, 1.0],
         [-1.0, 1.11022302463e-16, 1.0],
         [-1.0, 1.11022302463e-16, 1.0],
         [-1.0, 1.11022302463e-16, 1.0],
         [-1.0, 1.11022302463e-16, 1.0]], dtype=object), 'FE1_D01': array([[0.563843963708, 1.11022302463e-16, -0.0722665257879, 2.6361104895,
          -0.491577437921, -2.6361104895],
         [0.0722665257879, 0.0, -0.563843963708, 2.6361104895,
          0.491577437921, -2.6361104895],
         [0.563843963708, 5.55111512313e-17, 1.6361104895, 0.927733474212,
          -2.1999544532, -0.927733474212],
         [-1.6361104895, 0.0, -0.563843963708, 0.927733474212, 2.1999544532,
          -0.927733474212],
         [0.0722665257879, -1.11022302463e-16, 1.6361104895, 0.436156036292,
          -1.70837701528, -0.436156036292],
         [-1.6361104895, -2.77555756156e-17, -0.0722665257879,
          0.436156036292, 1.70837701528, -0.436156036292]], dtype=object), 'FE1_D10': array([[0.563843963708, 1.6361104895, 0.0, 0.927733474212, -0.927733474212,
          -2.1999544532],
         [0.0722665257879, 1.6361104895, 0.0, 0.436156036292,
          -0.436156036292, -1.70837701528],
         [0.563843963708, -0.0722665257879, 0.0, 2.6361104895, -2.6361104895,
          -0.491577437921],
         [-1.6361104895, -0.0722665257879, 0.0, 0.436156036292,
          -0.436156036292, 1.70837701528],
         [0.0722665257879, -0.563843963708, 0.0, 2.6361104895, -2.6361104895,
          0.491577437921],
         [-1.6361104895, -0.563843963708, 0.0, 0.927733474212,
          -0.927733474212, 2.1999544532]], dtype=object), 'FE0': array([[0.109039009073, 0.659027622374, 0.231933368553],
         [0.231933368553, 0.659027622374, 0.109039009073],
         [0.109039009073, 0.231933368553, 0.659027622374],
         [0.659027622374, 0.231933368553, 0.109039009073],
         [0.231933368553, 0.109039009073, 0.659027622374],
         [0.659027622374, 0.109039009073, 0.231933368553]], dtype=object), 'FE1': array([[-0.0852599980737, 0.20960719173, -0.124347193656, 0.611401985707,
          0.101159138712, 0.287438875581],
         [-0.124347193656, 0.20960719173, -0.0852599980737, 0.287438875581,
          0.101159138712, 0.611401985707],
         [-0.0852599980737, -0.124347193656, 0.20960719173, 0.611401985707,
          0.287438875581, 0.101159138712],
         [0.20960719173, -0.124347193656, -0.0852599980737, 0.101159138712,
          0.287438875581, 0.611401985707],
         [-0.124347193656, -0.0852599980737, 0.20960719173, 0.287438875581,
          0.611401985707, 0.101159138712],
         [0.20960719173, -0.0852599980737, -0.124347193656, 0.101159138712,
          0.611401985707, 0.287438875581]], dtype=object)}
  
  tables: {'FE0_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0_D01': array([[-1.0, 1.11022302463e-16, 1.0],
         [-1.0, 1.11022302463e-16, 1.0],
         [-1.0, 1.11022302463e-16, 1.0],
         [-1.0, 1.11022302463e-16, 1.0],
         [-1.0, 1.11022302463e-16, 1.0],
         [-1.0, 1.11022302463e-16, 1.0]], dtype=object), 'FE1_D01': array([[0.563843963708, 1.11022302463e-16, -0.0722665257879, 2.6361104895,
          -0.491577437921, -2.6361104895],
         [0.0722665257879, 0.0, -0.563843963708, 2.6361104895,
          0.491577437921, -2.6361104895],
         [0.563843963708, 5.55111512313e-17, 1.6361104895, 0.927733474212,
          -2.1999544532, -0.927733474212],
         [-1.6361104895, 0.0, -0.563843963708, 0.927733474212, 2.1999544532,
          -0.927733474212],
         [0.0722665257879, -1.11022302463e-16, 1.6361104895, 0.436156036292,
          -1.70837701528, -0.436156036292],
         [-1.6361104895, -2.77555756156e-17, -0.0722665257879,
          0.436156036292, 1.70837701528, -0.436156036292]], dtype=object), 'FE1_D10': array([[0.563843963708, 1.6361104895, 0.0, 0.927733474212, -0.927733474212,
          -2.1999544532],
         [0.0722665257879, 1.6361104895, 0.0, 0.436156036292,
          -0.436156036292, -1.70837701528],
         [0.563843963708, -0.0722665257879, 0.0, 2.6361104895, -2.6361104895,
          -0.491577437921],
         [-1.6361104895, -0.0722665257879, 0.0, 0.436156036292,
          -0.436156036292, 1.70837701528],
         [0.0722665257879, -0.563843963708, 0.0, 2.6361104895, -2.6361104895,
          0.491577437921],
         [-1.6361104895, -0.563843963708, 0.0, 0.927733474212,
          -0.927733474212, 2.1999544532]], dtype=object), 'FE0': array([[0.109039009073, 0.659027622374, 0.231933368553],
         [0.231933368553, 0.659027622374, 0.109039009073],
         [0.109039009073, 0.231933368553, 0.659027622374],
         [0.659027622374, 0.231933368553, 0.109039009073],
         [0.231933368553, 0.109039009073, 0.659027622374],
         [0.659027622374, 0.109039009073, 0.231933368553]], dtype=object), 'FE1': array([[-0.0852599980737, 0.20960719173, -0.124347193656, 0.611401985707,
          0.101159138712, 0.287438875581],
         [-0.124347193656, 0.20960719173, -0.0852599980737, 0.287438875581,
          0.101159138712, 0.611401985707],
         [-0.0852599980737, -0.124347193656, 0.20960719173, 0.611401985707,
          0.287438875581, 0.101159138712],
         [0.20960719173, -0.124347193656, -0.0852599980737, 0.101159138712,
          0.287438875581, 0.611401985707],
         [-0.124347193656, -0.0852599980737, 0.20960719173, 0.287438875581,
          0.611401985707, 0.101159138712],
         [0.20960719173, -0.0852599980737, -0.124347193656, 0.101159138712,
          0.611401985707, 0.287438875581]], dtype=object)}
  
  name_map: {}
  
  inv_name_map: {'FE0_D10': 'FE0_D10', 'FE0_D01': 'FE0_D01', 'FE1_D01': 'FE1_D01', 'FE1_D10': 'FE1_D10', 'FE0': 'FE0', 'FE1': 'FE1'}
  
  QG-utils, psi_tables, unique_tables:
  {'FE0_D01': array([[-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0]], dtype=object), 'FE1_D01': array([[0.563843963708, -0.0722665257879, 2.6361104895, -0.491577437921,
          -2.6361104895],
         [0.0722665257879, -0.563843963708, 2.6361104895, 0.491577437921,
          -2.6361104895],
         [0.563843963708, 1.6361104895, 0.927733474212, -2.1999544532,
          -0.927733474212],
         [-1.6361104895, -0.563843963708, 0.927733474212, 2.1999544532,
          -0.927733474212],
         [0.0722665257879, 1.6361104895, 0.436156036292, -1.70837701528,
          -0.436156036292],
         [-1.6361104895, -0.0722665257879, 0.436156036292, 1.70837701528,
          -0.436156036292]], dtype=object), 'FE1_D10': array([[0.563843963708, 1.6361104895, 0.927733474212, -0.927733474212,
          -2.1999544532],
         [0.0722665257879, 1.6361104895, 0.436156036292, -0.436156036292,
          -1.70837701528],
         [0.563843963708, -0.0722665257879, 2.6361104895, -2.6361104895,
          -0.491577437921],
         [-1.6361104895, -0.0722665257879, 0.436156036292, -0.436156036292,
          1.70837701528],
         [0.0722665257879, -0.563843963708, 2.6361104895, -2.6361104895,
          0.491577437921],
         [-1.6361104895, -0.563843963708, 0.927733474212, -0.927733474212,
          2.1999544532]], dtype=object), 'FE0': array([[0.109039009073, 0.659027622374, 0.231933368553],
         [0.231933368553, 0.659027622374, 0.109039009073],
         [0.109039009073, 0.231933368553, 0.659027622374],
         [0.659027622374, 0.231933368553, 0.109039009073],
         [0.231933368553, 0.109039009073, 0.659027622374],
         [0.659027622374, 0.109039009073, 0.231933368553]], dtype=object), 'FE1': array([[-0.0852599980737, 0.20960719173, -0.124347193656, 0.611401985707,
          0.101159138712, 0.287438875581],
         [-0.124347193656, 0.20960719173, -0.0852599980737, 0.287438875581,
          0.101159138712, 0.611401985707],
         [-0.0852599980737, -0.124347193656, 0.20960719173, 0.611401985707,
          0.287438875581, 0.101159138712],
         [0.20960719173, -0.124347193656, -0.0852599980737, 0.101159138712,
          0.287438875581, 0.611401985707],
         [-0.124347193656, -0.0852599980737, 0.20960719173, 0.287438875581,
          0.611401985707, 0.101159138712],
         [0.20960719173, -0.0852599980737, -0.124347193656, 0.101159138712,
          0.611401985707, 0.287438875581]], dtype=object)}
  
  QG-utils, psi_tables, name_map:
  {'FE0_D10': ('FE0_D01', (1, [0, 1]), False, False), 'FE0_D01': ('FE0_D01', (0, [0, 2]), False, False), 'FE1_D01': ('FE1_D01', (2, [0, 2, 3, 4, 5]), False, False), 'FE1_D10': ('FE1_D10', (3, [0, 1, 3, 4, 5]), False, False), 'FE0': ('FE0', (), False, False), 'FE1': ('FE1', (), False, False)}
  Transforming cell integral
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00323 seconds
  Shape of reference tensor: (3, 6)
  Primary multi index:   rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00278 seconds
  Shape of reference tensor: (3, 6)
  Primary multi index:   rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00283 seconds
  Shape of reference tensor: (3, 6)
  Primary multi index:   rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00569 seconds
  Shape of reference tensor: (3, 3, 1)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [1] indices = [[0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [1] indices = [[0]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing quadrature representation
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  
  QG-utils, psi_tables:
  {7: {FiniteElement('Bubble', Cell('triangle', Space(2)), 3, None): {None: {(0, 1): array([[-2.77555756156e-16, 3.21964677141e-15, -1.9037602159, 1.9037602159,
          -1.22124532709e-15, 5.20988266488, -5.20988266488]], dtype=object), (1, 0): array([[4.90770463059e-16, -1.9037602159, 3.02976392448e-15, 1.9037602159,
          5.20988266488, -5.88564282095e-17, -5.20988266488]], dtype=object), (0, 0): array([[1.0, 0.220880757792, 0.220880757792, 0.220880757792,
          0.356378717426, 0.356378717426, 0.356378717426]], dtype=object)}}, FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None): {None: {(0, 1): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], dtype=object), (1, 0): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=object), (0, 0): array([[0.333333333333, 0.101286507323, 0.101286507323, 0.797426985353,
          0.470142064105, 0.470142064105, 0.0597158717898],
         [0.333333333333, 0.797426985353, 0.101286507323, 0.101286507323,
          0.0597158717898, 0.470142064105, 0.470142064105],
         [0.333333333333, 0.101286507323, 0.797426985353, 0.101286507323,
          0.470142064105, 0.0597158717898, 0.470142064105]], dtype=object)}}, FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 1, None): {None: {(0, 1): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], dtype=object), (1, 0): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=object), (0, 0): array([[0.333333333333, 0.101286507323, 0.101286507323, 0.797426985353,
          0.470142064105, 0.470142064105, 0.0597158717898],
         [0.333333333333, 0.797426985353, 0.101286507323, 0.101286507323,
          0.0597158717898, 0.470142064105, 0.470142064105],
         [0.333333333333, 0.101286507323, 0.797426985353, 0.101286507323,
          0.470142064105, 0.0597158717898, 0.470142064105]], dtype=object)}}}}
  
  QG-utils, psi_tables, flat_tables:
  {'FE0_D10': array([[4.90770463059e-16],
         [-1.9037602159],
         [3.02976392448e-15],
         [1.9037602159],
         [5.20988266488],
         [-5.88564282095e-17],
         [-5.20988266488]], dtype=object), 'FE0_D01': array([[-2.77555756156e-16],
         [3.21964677141e-15],
         [-1.9037602159],
         [1.9037602159],
         [-1.22124532709e-15],
         [5.20988266488],
         [-5.20988266488]], dtype=object), 'FE1_D01': array([[-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0]], dtype=object), 'FE2': array([[0.333333333333, 0.333333333333, 0.333333333333],
         [0.101286507323, 0.797426985353, 0.101286507323],
         [0.101286507323, 0.101286507323, 0.797426985353],
         [0.797426985353, 0.101286507323, 0.101286507323],
         [0.470142064105, 0.0597158717898, 0.470142064105],
         [0.470142064105, 0.470142064105, 0.0597158717898],
         [0.0597158717898, 0.470142064105, 0.470142064105]], dtype=object), 'FE1_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0': array([[1.0],
         [0.220880757792],
         [0.220880757792],
         [0.220880757792],
         [0.356378717426],
         [0.356378717426],
         [0.356378717426]], dtype=object), 'FE1': array([[0.333333333333, 0.333333333333, 0.333333333333],
         [0.101286507323, 0.797426985353, 0.101286507323],
         [0.101286507323, 0.101286507323, 0.797426985353],
         [0.797426985353, 0.101286507323, 0.101286507323],
         [0.470142064105, 0.0597158717898, 0.470142064105],
         [0.470142064105, 0.470142064105, 0.0597158717898],
         [0.0597158717898, 0.470142064105, 0.470142064105]], dtype=object), 'FE2_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE2_D01': array([[-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0]], dtype=object)}
  
  tables: {'FE0_D10': array([[4.90770463059e-16],
         [-1.9037602159],
         [3.02976392448e-15],
         [1.9037602159],
         [5.20988266488],
         [-5.88564282095e-17],
         [-5.20988266488]], dtype=object), 'FE0_D01': array([[-2.77555756156e-16],
         [3.21964677141e-15],
         [-1.9037602159],
         [1.9037602159],
         [-1.22124532709e-15],
         [5.20988266488],
         [-5.20988266488]], dtype=object), 'FE1_D01': array([[-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0]], dtype=object), 'FE1_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0': array([[1.0],
         [0.220880757792],
         [0.220880757792],
         [0.220880757792],
         [0.356378717426],
         [0.356378717426],
         [0.356378717426]], dtype=object), 'FE1': array([[0.333333333333, 0.333333333333, 0.333333333333],
         [0.101286507323, 0.797426985353, 0.101286507323],
         [0.101286507323, 0.101286507323, 0.797426985353],
         [0.797426985353, 0.101286507323, 0.101286507323],
         [0.470142064105, 0.0597158717898, 0.470142064105],
         [0.470142064105, 0.470142064105, 0.0597158717898],
         [0.0597158717898, 0.470142064105, 0.470142064105]], dtype=object)}
  
  name_map: {'FE1_D01': ['FE2_D01'], 'FE1_D10': ['FE2_D10'], 'FE1': ['FE2']}
  
  inv_name_map: {'FE0_D10': 'FE0_D10', 'FE0_D01': 'FE0_D01', 'FE1_D01': 'FE1_D01', 'FE2': 'FE1', 'FE1_D10': 'FE1_D10', 'FE0': 'FE0', 'FE1': 'FE1', 'FE2_D10': 'FE1_D10', 'FE2_D01': 'FE1_D01'}
  
  QG-utils, psi_tables, unique_tables:
  {'FE0_D10': array([[0],
         [-1.9037602159],
         [0],
         [1.9037602159],
         [5.20988266488],
         [0],
         [-5.20988266488]], dtype=object), 'FE0_D01': array([[0],
         [0],
         [-1.9037602159],
         [1.9037602159],
         [0],
         [5.20988266488],
         [-5.20988266488]], dtype=object), 'FE1_D01': array([[-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0]], dtype=object), 'FE0': array([[1.0],
         [0.220880757792],
         [0.220880757792],
         [0.220880757792],
         [0.356378717426],
         [0.356378717426],
         [0.356378717426]], dtype=object), 'FE1': array([[0.333333333333, 0.333333333333, 0.333333333333],
         [0.101286507323, 0.797426985353, 0.101286507323],
         [0.101286507323, 0.101286507323, 0.797426985353],
         [0.797426985353, 0.101286507323, 0.101286507323],
         [0.470142064105, 0.0597158717898, 0.470142064105],
         [0.470142064105, 0.470142064105, 0.0597158717898],
         [0.0597158717898, 0.470142064105, 0.470142064105]], dtype=object)}
  
  QG-utils, psi_tables, name_map:
  {'FE0_D10': ('FE0_D10', (), False, False), 'FE0_D01': ('FE0_D01', (), False, False), 'FE1_D01': ('FE1_D01', (0, [0, 2]), False, False), 'FE2': ('FE1', (), False, False), 'FE1_D10': ('FE1_D01', (1, [0, 1]), False, False), 'FE0': ('FE0', (), False, False), 'FE1': ('FE1', (), False, False), 'FE2_D10': ('FE1_D01', (1, [0, 1]), False, False), 'FE2_D01': ('FE1_D01', (0, [0, 2]), False, False)}
  Transforming cell integral
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00556 seconds
  Shape of reference tensor: (3, 3, 1)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00545 seconds
  Shape of reference tensor: (3, 3, 1)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00528 seconds
  Shape of reference tensor: (3, 3, 1)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00357 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00371 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00362 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00541 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00541 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00548 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00557 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00537 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00536 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00552 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00535 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00539 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00544 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00543 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00543 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00559 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00536 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00537 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00557 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00548 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.0055 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing quadrature representation
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  
  QG-utils, psi_tables:
  {6: {FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 2, None): {None: {(0, 1): array([[0.633695145961, 0.633695145961, -2.26739029192, -0.783793963664,
          -0.783793963664, 0.567587927328],
         [0.0, 1.11022302463e-16, 3.33066907388e-16, -9.71445146547e-17,
          -1.11022302463e-16, 1.5959455979e-16],
         [-0.633695145961, 2.26739029192, -0.633695145961, 0.783793963664,
          -0.567587927328, 0.783793963664],
         [3.26739029192, 0.366304854039, 0.366304854039, 0.432412072672,
          1.78379396366, 1.78379396366],
         [-2.6645352591e-15, -2.90108543788, 2.90108543788,
          1.94289029309e-16, 1.35138189099, -1.35138189099],
         [-3.26739029192, -0.366304854039, -0.366304854039, -0.432412072672,
          -1.78379396366, -1.78379396366]], dtype=object), (1, 0): array([[0.633695145961, 0.633695145961, -2.26739029192, -0.783793963664,
          -0.783793963664, 0.567587927328],
         [2.26739029192, -0.633695145961, -0.633695145961, -0.567587927328,
          0.783793963664, 0.783793963664],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
         [0.366304854039, 3.26739029192, 0.366304854039, 1.78379396366,
          0.432412072672, 1.78379396366],
         [-0.366304854039, -3.26739029192, -0.366304854039, -1.78379396366,
          -0.432412072672, -1.78379396366],
         [-2.90108543788, -3.83550991463e-15, 2.90108543788, 1.35138189099,
          -6.22256055681e-17, -1.35138189099]], dtype=object), (0, 0): array([[-0.0748038077482, -0.0748038077482, 0.517632341988,
          -0.0482083778155, -0.0482083778155, -0.084730493094],
         [0.517632341988, -0.0748038077482, -0.0748038077482,
          -0.084730493094, -0.0482083778155, -0.0482083778155],
         [-0.0748038077482, 0.517632341988, -0.0748038077482,
          -0.0482083778155, -0.084730493094, -0.0482083778155],
         [0.299215230993, 0.299215230993, 0.0335448115231, 0.192833511262,
          0.192833511262, 0.795480226201],
         [0.0335448115231, 0.299215230993, 0.299215230993, 0.795480226201,
          0.192833511262, 0.192833511262],
         [0.299215230993, 0.0335448115231, 0.299215230993, 0.192833511262,
          0.795480226201, 0.192833511262]], dtype=object)}}, FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None): {None: {(0, 1): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], dtype=object), (1, 0): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=object), (0, 0): array([[0.0915762135098, 0.0915762135098, 0.81684757298, 0.445948490916,
          0.445948490916, 0.108103018168],
         [0.81684757298, 0.0915762135098, 0.0915762135098, 0.108103018168,
          0.445948490916, 0.445948490916],
         [0.0915762135098, 0.81684757298, 0.0915762135098, 0.445948490916,
          0.108103018168, 0.445948490916]], dtype=object)}}, FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 1, None): {None: {(0, 1): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], dtype=object), (1, 0): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=object), (0, 0): array([[0.0915762135098, 0.0915762135098, 0.81684757298, 0.445948490916,
          0.445948490916, 0.108103018168],
         [0.81684757298, 0.0915762135098, 0.0915762135098, 0.108103018168,
          0.445948490916, 0.445948490916],
         [0.0915762135098, 0.81684757298, 0.0915762135098, 0.445948490916,
          0.108103018168, 0.445948490916]], dtype=object)}}}}
  
  QG-utils, psi_tables, flat_tables:
  {'FE0_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0_D01': array([[-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0]], dtype=object), 'FE1_D01': array([[-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0]], dtype=object), 'FE2': array([[-0.0748038077482, 0.517632341988, -0.0748038077482, 0.299215230993,
          0.0335448115231, 0.299215230993],
         [-0.0748038077482, -0.0748038077482, 0.517632341988, 0.299215230993,
          0.299215230993, 0.0335448115231],
         [0.517632341988, -0.0748038077482, -0.0748038077482,
          0.0335448115231, 0.299215230993, 0.299215230993],
         [-0.0482083778155, -0.084730493094, -0.0482083778155,
          0.192833511262, 0.795480226201, 0.192833511262],
         [-0.0482083778155, -0.0482083778155, -0.084730493094,
          0.192833511262, 0.192833511262, 0.795480226201],
         [-0.084730493094, -0.0482083778155, -0.0482083778155,
          0.795480226201, 0.192833511262, 0.192833511262]], dtype=object), 'FE1_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0': array([[0.0915762135098, 0.81684757298, 0.0915762135098],
         [0.0915762135098, 0.0915762135098, 0.81684757298],
         [0.81684757298, 0.0915762135098, 0.0915762135098],
         [0.445948490916, 0.108103018168, 0.445948490916],
         [0.445948490916, 0.445948490916, 0.108103018168],
         [0.108103018168, 0.445948490916, 0.445948490916]], dtype=object), 'FE1': array([[0.0915762135098, 0.81684757298, 0.0915762135098],
         [0.0915762135098, 0.0915762135098, 0.81684757298],
         [0.81684757298, 0.0915762135098, 0.0915762135098],
         [0.445948490916, 0.108103018168, 0.445948490916],
         [0.445948490916, 0.445948490916, 0.108103018168],
         [0.108103018168, 0.445948490916, 0.445948490916]], dtype=object), 'FE2_D10': array([[0.633695145961, 2.26739029192, 0.0, 0.366304854039,
          -0.366304854039, -2.90108543788],
         [0.633695145961, -0.633695145961, 0.0, 3.26739029192,
          -3.26739029192, -3.83550991463e-15],
         [-2.26739029192, -0.633695145961, 0.0, 0.366304854039,
          -0.366304854039, 2.90108543788],
         [-0.783793963664, -0.567587927328, 0.0, 1.78379396366,
          -1.78379396366, 1.35138189099],
         [-0.783793963664, 0.783793963664, 0.0, 0.432412072672,
          -0.432412072672, -6.22256055681e-17],
         [0.567587927328, 0.783793963664, 0.0, 1.78379396366, -1.78379396366,
          -1.35138189099]], dtype=object), 'FE2_D01': array([[0.633695145961, 0.0, -0.633695145961, 3.26739029192,
          -2.6645352591e-15, -3.26739029192],
         [0.633695145961, 1.11022302463e-16, 2.26739029192, 0.366304854039,
          -2.90108543788, -0.366304854039],
         [-2.26739029192, 3.33066907388e-16, -0.633695145961, 0.366304854039,
          2.90108543788, -0.366304854039],
         [-0.783793963664, -9.71445146547e-17, 0.783793963664,
          0.432412072672, 1.94289029309e-16, -0.432412072672],
         [-0.783793963664, -1.11022302463e-16, -0.567587927328,
          1.78379396366, 1.35138189099, -1.78379396366],
         [0.567587927328, 1.5959455979e-16, 0.783793963664, 1.78379396366,
          -1.35138189099, -1.78379396366]], dtype=object)}
  
  tables: {'FE0_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0_D01': array([[-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0]], dtype=object), 'FE2': array([[-0.0748038077482, 0.517632341988, -0.0748038077482, 0.299215230993,
          0.0335448115231, 0.299215230993],
         [-0.0748038077482, -0.0748038077482, 0.517632341988, 0.299215230993,
          0.299215230993, 0.0335448115231],
         [0.517632341988, -0.0748038077482, -0.0748038077482,
          0.0335448115231, 0.299215230993, 0.299215230993],
         [-0.0482083778155, -0.084730493094, -0.0482083778155,
          0.192833511262, 0.795480226201, 0.192833511262],
         [-0.0482083778155, -0.0482083778155, -0.084730493094,
          0.192833511262, 0.192833511262, 0.795480226201],
         [-0.084730493094, -0.0482083778155, -0.0482083778155,
          0.795480226201, 0.192833511262, 0.192833511262]], dtype=object), 'FE0': array([[0.0915762135098, 0.81684757298, 0.0915762135098],
         [0.0915762135098, 0.0915762135098, 0.81684757298],
         [0.81684757298, 0.0915762135098, 0.0915762135098],
         [0.445948490916, 0.108103018168, 0.445948490916],
         [0.445948490916, 0.445948490916, 0.108103018168],
         [0.108103018168, 0.445948490916, 0.445948490916]], dtype=object), 'FE2_D10': array([[0.633695145961, 2.26739029192, 0.0, 0.366304854039,
          -0.366304854039, -2.90108543788],
         [0.633695145961, -0.633695145961, 0.0, 3.26739029192,
          -3.26739029192, -3.83550991463e-15],
         [-2.26739029192, -0.633695145961, 0.0, 0.366304854039,
          -0.366304854039, 2.90108543788],
         [-0.783793963664, -0.567587927328, 0.0, 1.78379396366,
          -1.78379396366, 1.35138189099],
         [-0.783793963664, 0.783793963664, 0.0, 0.432412072672,
          -0.432412072672, -6.22256055681e-17],
         [0.567587927328, 0.783793963664, 0.0, 1.78379396366, -1.78379396366,
          -1.35138189099]], dtype=object), 'FE2_D01': array([[0.633695145961, 0.0, -0.633695145961, 3.26739029192,
          -2.6645352591e-15, -3.26739029192],
         [0.633695145961, 1.11022302463e-16, 2.26739029192, 0.366304854039,
          -2.90108543788, -0.366304854039],
         [-2.26739029192, 3.33066907388e-16, -0.633695145961, 0.366304854039,
          2.90108543788, -0.366304854039],
         [-0.783793963664, -9.71445146547e-17, 0.783793963664,
          0.432412072672, 1.94289029309e-16, -0.432412072672],
         [-0.783793963664, -1.11022302463e-16, -0.567587927328,
          1.78379396366, 1.35138189099, -1.78379396366],
         [0.567587927328, 1.5959455979e-16, 0.783793963664, 1.78379396366,
          -1.35138189099, -1.78379396366]], dtype=object)}
  
  name_map: {'FE0_D10': ['FE1_D10'], 'FE0_D01': ['FE1_D01'], 'FE0': ['FE1']}
  
  inv_name_map: {'FE0_D10': 'FE0_D10', 'FE0_D01': 'FE0_D01', 'FE1_D01': 'FE0_D01', 'FE2': 'FE2', 'FE1_D10': 'FE0_D10', 'FE0': 'FE0', 'FE1': 'FE0', 'FE2_D10': 'FE2_D10', 'FE2_D01': 'FE2_D01'}
  
  QG-utils, psi_tables, unique_tables:
  {'FE0_D01': array([[-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0]], dtype=object), 'FE2': array([[-0.0748038077482, 0.517632341988, -0.0748038077482, 0.299215230993,
          0.0335448115231, 0.299215230993],
         [-0.0748038077482, -0.0748038077482, 0.517632341988, 0.299215230993,
          0.299215230993, 0.0335448115231],
         [0.517632341988, -0.0748038077482, -0.0748038077482,
          0.0335448115231, 0.299215230993, 0.299215230993],
         [-0.0482083778155, -0.084730493094, -0.0482083778155,
          0.192833511262, 0.795480226201, 0.192833511262],
         [-0.0482083778155, -0.0482083778155, -0.084730493094,
          0.192833511262, 0.192833511262, 0.795480226201],
         [-0.084730493094, -0.0482083778155, -0.0482083778155,
          0.795480226201, 0.192833511262, 0.192833511262]], dtype=object), 'FE0': array([[0.0915762135098, 0.81684757298, 0.0915762135098],
         [0.0915762135098, 0.0915762135098, 0.81684757298],
         [0.81684757298, 0.0915762135098, 0.0915762135098],
         [0.445948490916, 0.108103018168, 0.445948490916],
         [0.445948490916, 0.445948490916, 0.108103018168],
         [0.108103018168, 0.445948490916, 0.445948490916]], dtype=object), 'FE2_D10': array([[0.633695145961, 2.26739029192, 0.366304854039, -0.366304854039,
          -2.90108543788],
         [0.633695145961, -0.633695145961, 3.26739029192, -3.26739029192, 0],
         [-2.26739029192, -0.633695145961, 0.366304854039, -0.366304854039,
          2.90108543788],
         [-0.783793963664, -0.567587927328, 1.78379396366, -1.78379396366,
          1.35138189099],
         [-0.783793963664, 0.783793963664, 0.432412072672, -0.432412072672, 0],
         [0.567587927328, 0.783793963664, 1.78379396366, -1.78379396366,
          -1.35138189099]], dtype=object), 'FE2_D01': array([[0.633695145961, -0.633695145961, 3.26739029192, 0, -3.26739029192],
         [0.633695145961, 2.26739029192, 0.366304854039, -2.90108543788,
          -0.366304854039],
         [-2.26739029192, -0.633695145961, 0.366304854039, 2.90108543788,
          -0.366304854039],
         [-0.783793963664, 0.783793963664, 0.432412072672, 0, -0.432412072672],
         [-0.783793963664, -0.567587927328, 1.78379396366, 1.35138189099,
          -1.78379396366],
         [0.567587927328, 0.783793963664, 1.78379396366, -1.35138189099,
          -1.78379396366]], dtype=object)}
  
  QG-utils, psi_tables, name_map:
  {'FE0_D10': ('FE0_D01', (1, [0, 1]), False, False), 'FE0_D01': ('FE0_D01', (0, [0, 2]), False, False), 'FE1_D01': ('FE0_D01', (0, [0, 2]), False, False), 'FE2': ('FE2', (), False, False), 'FE1_D10': ('FE0_D01', (1, [0, 1]), False, False), 'FE0': ('FE0', (), False, False), 'FE1': ('FE0', (), False, False), 'FE2_D10': ('FE2_D10', (3, [0, 1, 3, 4, 5]), False, False), 'FE2_D01': ('FE2_D01', (2, [0, 2, 3, 4, 5]), False, False)}
  Transforming cell integral
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00453 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00432 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00438 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00356 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00257 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00342 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00301 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00333 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00302 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00327 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00288 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00513 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00452 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00507 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00453 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00517 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00438 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00558 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00417 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00564 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00417 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00501 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00431 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00494 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00442 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00496 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00429 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00516 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00429 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.0052 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00418 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00514 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00429 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00509 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00439 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00505 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00429 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00509 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00428 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00497 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00431 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00516 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00417 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00513 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00428 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00512 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00424 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00506 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00433 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00504 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00431 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00538 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00426 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00515 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00431 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.0051 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00428 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00529 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00432 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00513 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00432 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00514 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00427 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00517 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00423 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00508 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00433 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00516 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00436 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00499 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00425 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00512 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00433 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00507 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00422 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00526 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00444 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00514 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00435 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00509 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00433 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00491 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00439 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  36 entries computed in 0.00141 seconds
  Shape of reference tensor: (3, 3, 2, 2)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  External multi index:  rank = 1 dims = [2] indices = [[0], [1]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.00118 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.00176 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.00169 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.00177 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  3 entries computed in 0.000856 seconds
  Shape of reference tensor: (3,)
  Primary multi index:   rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing representation of forms
  
Compiler stage 2 finished in 0.782026 seconds.

Compiler stage 3: Optimizing intermediate representation
--------------------------------------------------------
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Optimising expressions for cell integral
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Optimising expressions for cell integral
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Optimising expressions for cell integral
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  
Compiler stage 3 finished in 0.0184898 seconds.

Compiler stage 4: Generating code
---------------------------------
  Generating code for 6 elements
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp0
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: Y
  Removing unused variable: X
  Removing unused variable: C1
  Removing unused variable: C0
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: detJ
  Removing unused variable: J_11
  Removing unused variable: J_10
  Removing unused variable: J_01
  Removing unused variable: J_00
  Removing unused variable: x
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp0
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: Y
  Removing unused variable: X
  Removing unused variable: C1
  Removing unused variable: C0
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Generating code for 6 dofmaps
  Generating code for integrals
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: circumradius
  Removing unused variable: v0v1
  Removing unused variable: v0v2
  Removing unused variable: v1v2
  Removing unused variable: volume
  Cell, number of operations to compute tensor: 372
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: detJ
  Removing unused variable: J_11
  Removing unused variable: J_10
  Removing unused variable: J_01
  Removing unused variable: J_00
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: circumradius
  Removing unused variable: v0v1
  Removing unused variable: v0v2
  Removing unused variable: v1v2
  Removing unused variable: volume
  Cell, number of operations to compute tensor: 411
  Removing unused variable: det
  Removing unused variable: dx1
  Removing unused variable: dx0
  Removing unused variable: v1
  Removing unused variable: v0
  Removing unused variable: edge_vertices
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: detJ
  Removing unused variable: J_11
  Removing unused variable: J_10
  Removing unused variable: J_01
  Removing unused variable: J_00
  Removing unused variable: x
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: detJ
  Removing unused variable: J_11
  Removing unused variable: J_10
  Removing unused variable: J_01
  Removing unused variable: J_00
  Removing unused variable: K1_11
  Removing unused variable: K1_10
  Removing unused variable: K1_01
  Removing unused variable: K1_00
  Removing unused variable: detJ1
  Removing unused variable: J1_11
  Removing unused variable: J1_10
  Removing unused variable: J1_01
  Removing unused variable: J1_00
  Removing unused variable: x1
  Removing unused variable: K0_11
  Removing unused variable: K0_10
  Removing unused variable: K0_01
  Removing unused variable: K0_00
  Removing unused variable: detJ0
  Removing unused variable: J0_11
  Removing unused variable: J0_10
  Removing unused variable: J0_01
  Removing unused variable: J0_00
  Removing unused variable: circumradius
  Removing unused variable: v0v1
  Removing unused variable: v0v2
  Removing unused variable: v1v2
  Removing unused variable: volume
  Cell, number of operations to compute tensor: 552
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: detJ
  Removing unused variable: J_11
  Removing unused variable: J_10
  Removing unused variable: J_01
  Removing unused variable: J_00
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: detJ
  Removing unused variable: J_11
  Removing unused variable: J_10
  Removing unused variable: J_01
  Removing unused variable: J_00
  Removing unused variable: K1_11
  Removing unused variable: K1_10
  Removing unused variable: K1_01
  Removing unused variable: K1_00
  Removing unused variable: detJ1
  Removing unused variable: J1_11
  Removing unused variable: J1_10
  Removing unused variable: J1_01
  Removing unused variable: J1_00
  Removing unused variable: x1
  Removing unused variable: K0_11
  Removing unused variable: K0_10
  Removing unused variable: K0_01
  Removing unused variable: K0_00
  Removing unused variable: detJ0
  Removing unused variable: J0_11
  Removing unused variable: J0_10
  Removing unused variable: J0_01
  Removing unused variable: J0_00
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: detJ
  Removing unused variable: J_11
  Removing unused variable: J_10
  Removing unused variable: J_01
  Removing unused variable: J_00
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Generating code for forms
  
Compiler stage 4 finished in 0.837366 seconds.

Compiler stage 4.1: Generating additional wrapper code
------------------------------------------------------
  Generating wrapper code for DOLFIN
  
Compiler stage 4.1 finished in 0.00567293 seconds.

Compiler stage 5: Formatting code
---------------------------------
  Output written to ./AdaptivePoisson.h.
  
Compiler stage 5 finished in 0.00471306 seconds.

[1;37;32mFFC finished in 1.80845 seconds.[0m
This is FFC, the FEniCS Form Compiler, version 0.9.10.
For further information, visit http://www.fenics.org/ffc/.

Compiling form AdaptivePoisson

Compiler stage 1: Analyzing form(s)
-----------------------------------
  
  Name:                             'a'
  Rank:                             2
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           0
  Number of cell domains:           1
  Number of exterior facet domains: 0
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0, v_1]'
  Coefficients:                     '[]'
  Argument names:                   '[v, u]'
  Coefficient names:                '[]'
  Unique elements:                  'CG1(?)'
  Unique sub elements:              'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 0
  quadrature_degree: auto --> 0
  quadrature_rule:   auto --> default
  
  Name:                             'a'
  Rank:                             1
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           0
  Number of cell domains:           1
  Number of exterior facet domains: 0
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0]'
  Coefficients:                     '[]'
  Argument names:                   '[v0]'
  Coefficient names:                '[]'
  Unique elements:                  'CG1(?)'
  Unique sub elements:              'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 0
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 1
  quadrature_degree: auto --> 1
  quadrature_rule:   auto --> default
  
  Name:                             'a'
  Rank:                             0
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           4
  Number of cell domains:           1
  Number of exterior facet domains: 1
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[]'
  Coefficients:                     '[w_0, w_1, w_2, w_3]'
  Argument names:                   '[]'
  Coefficient names:                '[f, g, __discrete_primal_solution, __improved_d
                                    ual]'
  Unique elements:                  'CG1(?), CG2(?)'
  Unique sub elements:              'CG1(?), CG2(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 4
  representation:    auto --> quadrature
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  
  Name:                             'a'
  Rank:                             2
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           1
  Number of cell domains:           1
  Number of exterior facet domains: 0
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0, v_1]'
  Coefficients:                     '[w_0]'
  Argument names:                   '[v0, v1]'
  Coefficient names:                '[__cell_bubble]'
  Unique elements:                  'DG1(?), B3(?)'
  Unique sub elements:              'DG1(?), B3(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 5
  quadrature_degree: auto --> 5
  quadrature_rule:   auto --> default
  
  Name:                             'a'
  Rank:                             1
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           4
  Number of cell domains:           1
  Number of exterior facet domains: 1
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0]'
  Coefficients:                     '[w_0, w_1, w_2, w_3]'
  Argument names:                   '[v0]'
  Coefficient names:                '[f, g, __discrete_primal_solution, __cell_bubbl
                                    e]'
  Unique elements:                  'DG1(?), CG1(?), B3(?)'
  Unique sub elements:              'DG1(?), CG1(?), B3(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 4
  representation:    auto --> quadrature
  Selecting quadrature degree based on total polynomial degree of integrand: 5
  quadrature_degree: auto --> 5
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 5
  quadrature_degree: auto --> 5
  quadrature_rule:   auto --> default
  
  Name:                             'a'
  Rank:                             2
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           1
  Number of cell domains:           0
  Number of exterior facet domains: 1
  Number or interior facet domains: 1
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0, v_1]'
  Coefficients:                     '[w_0]'
  Argument names:                   '[v0, v1]'
  Coefficient names:                '[__cell_cone]'
  Unique elements:                  'DG1(?), DG2(?)'
  Unique sub elements:              'DG1(?), DG2(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 4
  quadrature_degree: auto --> 4
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 4
  quadrature_degree: auto --> 4
  quadrature_rule:   auto --> default
  
  Name:                             'a'
  Rank:                             1
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           5
  Number of cell domains:           1
  Number of exterior facet domains: 1
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0]'
  Coefficients:                     '[w_0, w_1, w_2, w_3, w_4]'
  Argument names:                   '[v0]'
  Coefficient names:                '[f, g, __discrete_primal_solution, __cell_resid
                                    ual, __cell_cone]'
  Unique elements:                  'DG1(?), CG1(?), DG2(?)'
  Unique sub elements:              'DG1(?), CG1(?), DG2(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 4
  representation:    auto --> quadrature
  Selecting quadrature degree based on total polynomial degree of integrand: 4
  quadrature_degree: auto --> 4
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 4
  quadrature_degree: auto --> 4
  quadrature_rule:   auto --> default
  
  Name:                             'a'
  Rank:                             1
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           4
  Number of cell domains:           1
  Number of exterior facet domains: 1
  Number or interior facet domains: 1
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0]'
  Coefficients:                     '[w_0, w_1, w_2, w_3]'
  Argument names:                   '[v0]'
  Coefficient names:                '[__improved_dual, __cell_residual, __facet_resi
                                    dual, __discrete_dual_solution]'
  Unique elements:                  'DG0(?), CG2(?), DG1(?), CG1(?)'
  Unique sub elements:              'DG0(?), CG2(?), DG1(?), CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 3
  quadrature_degree: auto --> 3
  quadrature_rule:   auto --> default
  
  Name:                             'a'
  Rank:                             2
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           0
  Number of cell domains:           1
  Number of exterior facet domains: 0
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0, v_1]'
  Coefficients:                     '[]'
  Argument names:                   '[v, u]'
  Coefficient names:                '[]'
  Unique elements:                  'CG1(?)'
  Unique sub elements:              'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Estimated cost of tensor representation: 2
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 0
  quadrature_degree: auto --> 0
  quadrature_rule:   auto --> default
  
  Name:                             'L'
  Rank:                             1
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           2
  Number of cell domains:           1
  Number of exterior facet domains: 1
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[v_0]'
  Coefficients:                     '[w_0, w_1]'
  Argument names:                   '[v]'
  Coefficient names:                '[f, g]'
  Unique elements:                  'CG1(?)'
  Unique sub elements:              'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 2
  quadrature_degree: auto --> 2
  quadrature_rule:   auto --> default
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 2
  quadrature_degree: auto --> 2
  quadrature_rule:   auto --> default
  
  Name:                             'a'
  Rank:                             0
  Cell:                             <triangle cell in R2>
  Topological dimension:            2
  Geometric dimension:              2
  Number of facets:                 3
  Number of coefficients:           1
  Number of cell domains:           1
  Number of exterior facet domains: 0
  Number or interior facet domains: 0
  Number of macro cell domains:     0
  Number of surface domains:        0
  Arguments:                        '[]'
  Coefficients:                     '[w_0]'
  Argument names:                   '[]'
  Coefficient names:                '[__discrete_primal_solution]'
  Unique elements:                  'CG1(?)'
  Unique sub elements:              'CG1(?)'
  
  Extracting monomial form representation from UFL form
  Transforming monomial form to reference element
  Reusing element from cache
  Estimated cost of tensor representation: 1
  representation:    auto --> tensor
  Selecting quadrature degree based on total polynomial degree of integrand: 1
  quadrature_degree: auto --> 1
  quadrature_rule:   auto --> default
  
Compiler stage 1 finished in 0.157485 seconds.

Compiler stage 2: Computing intermediate representation
-------------------------------------------------------
  Computing representation of 6 elements
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing representation of 6 dofmaps
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing representation of integrals
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  36 entries computed in 0.00149 seconds
  Shape of reference tensor: (3, 3, 2, 2)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  External multi index:  rank = 1 dims = [2] indices = [[0], [1]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  3 entries computed in 0.000846 seconds
  Shape of reference tensor: (3,)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 0 dims = [] indices = [[]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 0 dims = [] indices = [[]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing quadrature representation
  Reusing element from cache
  Reusing element from cache
  
  QG-utils, psi_tables:
  {6: {FiniteElement('Lagrange', Cell('triangle', Space(2)), 2, None): {None: {(0, 1): array([[0.563843963708, 0.0722665257879, 0.563843963708, -1.6361104895,
          0.0722665257879, -1.6361104895],
         [1.11022302463e-16, 0.0, 5.55111512313e-17, 0.0, -1.11022302463e-16,
          -2.77555756156e-17],
         [-0.0722665257879, -0.563843963708, 1.6361104895, -0.563843963708,
          1.6361104895, -0.0722665257879],
         [2.6361104895, 2.6361104895, 0.927733474212, 0.927733474212,
          0.436156036292, 0.436156036292],
         [-0.491577437921, 0.491577437921, -2.1999544532, 2.1999544532,
          -1.70837701528, 1.70837701528],
         [-2.6361104895, -2.6361104895, -0.927733474212, -0.927733474212,
          -0.436156036292, -0.436156036292]], dtype=object), (1, 0): array([[0.563843963708, 0.0722665257879, 0.563843963708, -1.6361104895,
          0.0722665257879, -1.6361104895],
         [1.6361104895, 1.6361104895, -0.0722665257879, -0.0722665257879,
          -0.563843963708, -0.563843963708],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
         [0.927733474212, 0.436156036292, 2.6361104895, 0.436156036292,
          2.6361104895, 0.927733474212],
         [-0.927733474212, -0.436156036292, -2.6361104895, -0.436156036292,
          -2.6361104895, -0.927733474212],
         [-2.1999544532, -1.70837701528, -0.491577437921, 1.70837701528,
          0.491577437921, 2.1999544532]], dtype=object), (0, 0): array([[-0.0852599980737, -0.124347193656, -0.0852599980737, 0.20960719173,
          -0.124347193656, 0.20960719173],
         [0.20960719173, 0.20960719173, -0.124347193656, -0.124347193656,
          -0.0852599980737, -0.0852599980737],
         [-0.124347193656, -0.0852599980737, 0.20960719173, -0.0852599980737,
          0.20960719173, -0.124347193656],
         [0.611401985707, 0.287438875581, 0.611401985707, 0.101159138712,
          0.287438875581, 0.101159138712],
         [0.101159138712, 0.101159138712, 0.287438875581, 0.287438875581,
          0.611401985707, 0.611401985707],
         [0.287438875581, 0.611401985707, 0.101159138712, 0.611401985707,
          0.101159138712, 0.287438875581]], dtype=object)}}, FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None): {None: {(0, 1): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [1.11022302463e-16, 1.11022302463e-16, 1.11022302463e-16,
          1.11022302463e-16, 1.11022302463e-16, 1.11022302463e-16],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], dtype=object), (1, 0): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=object), (0, 0): array([[0.109039009073, 0.231933368553, 0.109039009073, 0.659027622374,
          0.231933368553, 0.659027622374],
         [0.659027622374, 0.659027622374, 0.231933368553, 0.231933368553,
          0.109039009073, 0.109039009073],
         [0.231933368553, 0.109039009073, 0.659027622374, 0.109039009073,
          0.659027622374, 0.231933368553]], dtype=object)}}}}
  
  QG-utils, psi_tables, flat_tables:
  {'FE0_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0_D01': array([[-1.0, 1.11022302463e-16, 1.0],
         [-1.0, 1.11022302463e-16, 1.0],
         [-1.0, 1.11022302463e-16, 1.0],
         [-1.0, 1.11022302463e-16, 1.0],
         [-1.0, 1.11022302463e-16, 1.0],
         [-1.0, 1.11022302463e-16, 1.0]], dtype=object), 'FE1_D01': array([[0.563843963708, 1.11022302463e-16, -0.0722665257879, 2.6361104895,
          -0.491577437921, -2.6361104895],
         [0.0722665257879, 0.0, -0.563843963708, 2.6361104895,
          0.491577437921, -2.6361104895],
         [0.563843963708, 5.55111512313e-17, 1.6361104895, 0.927733474212,
          -2.1999544532, -0.927733474212],
         [-1.6361104895, 0.0, -0.563843963708, 0.927733474212, 2.1999544532,
          -0.927733474212],
         [0.0722665257879, -1.11022302463e-16, 1.6361104895, 0.436156036292,
          -1.70837701528, -0.436156036292],
         [-1.6361104895, -2.77555756156e-17, -0.0722665257879,
          0.436156036292, 1.70837701528, -0.436156036292]], dtype=object), 'FE1_D10': array([[0.563843963708, 1.6361104895, 0.0, 0.927733474212, -0.927733474212,
          -2.1999544532],
         [0.0722665257879, 1.6361104895, 0.0, 0.436156036292,
          -0.436156036292, -1.70837701528],
         [0.563843963708, -0.0722665257879, 0.0, 2.6361104895, -2.6361104895,
          -0.491577437921],
         [-1.6361104895, -0.0722665257879, 0.0, 0.436156036292,
          -0.436156036292, 1.70837701528],
         [0.0722665257879, -0.563843963708, 0.0, 2.6361104895, -2.6361104895,
          0.491577437921],
         [-1.6361104895, -0.563843963708, 0.0, 0.927733474212,
          -0.927733474212, 2.1999544532]], dtype=object), 'FE0': array([[0.109039009073, 0.659027622374, 0.231933368553],
         [0.231933368553, 0.659027622374, 0.109039009073],
         [0.109039009073, 0.231933368553, 0.659027622374],
         [0.659027622374, 0.231933368553, 0.109039009073],
         [0.231933368553, 0.109039009073, 0.659027622374],
         [0.659027622374, 0.109039009073, 0.231933368553]], dtype=object), 'FE1': array([[-0.0852599980737, 0.20960719173, -0.124347193656, 0.611401985707,
          0.101159138712, 0.287438875581],
         [-0.124347193656, 0.20960719173, -0.0852599980737, 0.287438875581,
          0.101159138712, 0.611401985707],
         [-0.0852599980737, -0.124347193656, 0.20960719173, 0.611401985707,
          0.287438875581, 0.101159138712],
         [0.20960719173, -0.124347193656, -0.0852599980737, 0.101159138712,
          0.287438875581, 0.611401985707],
         [-0.124347193656, -0.0852599980737, 0.20960719173, 0.287438875581,
          0.611401985707, 0.101159138712],
         [0.20960719173, -0.0852599980737, -0.124347193656, 0.101159138712,
          0.611401985707, 0.287438875581]], dtype=object)}
  
  tables: {'FE0_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0_D01': array([[-1.0, 1.11022302463e-16, 1.0],
         [-1.0, 1.11022302463e-16, 1.0],
         [-1.0, 1.11022302463e-16, 1.0],
         [-1.0, 1.11022302463e-16, 1.0],
         [-1.0, 1.11022302463e-16, 1.0],
         [-1.0, 1.11022302463e-16, 1.0]], dtype=object), 'FE1_D01': array([[0.563843963708, 1.11022302463e-16, -0.0722665257879, 2.6361104895,
          -0.491577437921, -2.6361104895],
         [0.0722665257879, 0.0, -0.563843963708, 2.6361104895,
          0.491577437921, -2.6361104895],
         [0.563843963708, 5.55111512313e-17, 1.6361104895, 0.927733474212,
          -2.1999544532, -0.927733474212],
         [-1.6361104895, 0.0, -0.563843963708, 0.927733474212, 2.1999544532,
          -0.927733474212],
         [0.0722665257879, -1.11022302463e-16, 1.6361104895, 0.436156036292,
          -1.70837701528, -0.436156036292],
         [-1.6361104895, -2.77555756156e-17, -0.0722665257879,
          0.436156036292, 1.70837701528, -0.436156036292]], dtype=object), 'FE1_D10': array([[0.563843963708, 1.6361104895, 0.0, 0.927733474212, -0.927733474212,
          -2.1999544532],
         [0.0722665257879, 1.6361104895, 0.0, 0.436156036292,
          -0.436156036292, -1.70837701528],
         [0.563843963708, -0.0722665257879, 0.0, 2.6361104895, -2.6361104895,
          -0.491577437921],
         [-1.6361104895, -0.0722665257879, 0.0, 0.436156036292,
          -0.436156036292, 1.70837701528],
         [0.0722665257879, -0.563843963708, 0.0, 2.6361104895, -2.6361104895,
          0.491577437921],
         [-1.6361104895, -0.563843963708, 0.0, 0.927733474212,
          -0.927733474212, 2.1999544532]], dtype=object), 'FE0': array([[0.109039009073, 0.659027622374, 0.231933368553],
         [0.231933368553, 0.659027622374, 0.109039009073],
         [0.109039009073, 0.231933368553, 0.659027622374],
         [0.659027622374, 0.231933368553, 0.109039009073],
         [0.231933368553, 0.109039009073, 0.659027622374],
         [0.659027622374, 0.109039009073, 0.231933368553]], dtype=object), 'FE1': array([[-0.0852599980737, 0.20960719173, -0.124347193656, 0.611401985707,
          0.101159138712, 0.287438875581],
         [-0.124347193656, 0.20960719173, -0.0852599980737, 0.287438875581,
          0.101159138712, 0.611401985707],
         [-0.0852599980737, -0.124347193656, 0.20960719173, 0.611401985707,
          0.287438875581, 0.101159138712],
         [0.20960719173, -0.124347193656, -0.0852599980737, 0.101159138712,
          0.287438875581, 0.611401985707],
         [-0.124347193656, -0.0852599980737, 0.20960719173, 0.287438875581,
          0.611401985707, 0.101159138712],
         [0.20960719173, -0.0852599980737, -0.124347193656, 0.101159138712,
          0.611401985707, 0.287438875581]], dtype=object)}
  
  name_map: {}
  
  inv_name_map: {'FE0_D10': 'FE0_D10', 'FE0_D01': 'FE0_D01', 'FE1_D01': 'FE1_D01', 'FE1_D10': 'FE1_D10', 'FE0': 'FE0', 'FE1': 'FE1'}
  
  QG-utils, psi_tables, unique_tables:
  {'FE0_D01': array([[-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0]], dtype=object), 'FE1_D01': array([[0.563843963708, -0.0722665257879, 2.6361104895, -0.491577437921,
          -2.6361104895],
         [0.0722665257879, -0.563843963708, 2.6361104895, 0.491577437921,
          -2.6361104895],
         [0.563843963708, 1.6361104895, 0.927733474212, -2.1999544532,
          -0.927733474212],
         [-1.6361104895, -0.563843963708, 0.927733474212, 2.1999544532,
          -0.927733474212],
         [0.0722665257879, 1.6361104895, 0.436156036292, -1.70837701528,
          -0.436156036292],
         [-1.6361104895, -0.0722665257879, 0.436156036292, 1.70837701528,
          -0.436156036292]], dtype=object), 'FE1_D10': array([[0.563843963708, 1.6361104895, 0.927733474212, -0.927733474212,
          -2.1999544532],
         [0.0722665257879, 1.6361104895, 0.436156036292, -0.436156036292,
          -1.70837701528],
         [0.563843963708, -0.0722665257879, 2.6361104895, -2.6361104895,
          -0.491577437921],
         [-1.6361104895, -0.0722665257879, 0.436156036292, -0.436156036292,
          1.70837701528],
         [0.0722665257879, -0.563843963708, 2.6361104895, -2.6361104895,
          0.491577437921],
         [-1.6361104895, -0.563843963708, 0.927733474212, -0.927733474212,
          2.1999544532]], dtype=object), 'FE0': array([[0.109039009073, 0.659027622374, 0.231933368553],
         [0.231933368553, 0.659027622374, 0.109039009073],
         [0.109039009073, 0.231933368553, 0.659027622374],
         [0.659027622374, 0.231933368553, 0.109039009073],
         [0.231933368553, 0.109039009073, 0.659027622374],
         [0.659027622374, 0.109039009073, 0.231933368553]], dtype=object), 'FE1': array([[-0.0852599980737, 0.20960719173, -0.124347193656, 0.611401985707,
          0.101159138712, 0.287438875581],
         [-0.124347193656, 0.20960719173, -0.0852599980737, 0.287438875581,
          0.101159138712, 0.611401985707],
         [-0.0852599980737, -0.124347193656, 0.20960719173, 0.611401985707,
          0.287438875581, 0.101159138712],
         [0.20960719173, -0.124347193656, -0.0852599980737, 0.101159138712,
          0.287438875581, 0.611401985707],
         [-0.124347193656, -0.0852599980737, 0.20960719173, 0.287438875581,
          0.611401985707, 0.101159138712],
         [0.20960719173, -0.0852599980737, -0.124347193656, 0.101159138712,
          0.611401985707, 0.287438875581]], dtype=object)}
  
  QG-utils, psi_tables, name_map:
  {'FE0_D10': ('FE0_D01', (1, [0, 1]), False, False), 'FE0_D01': ('FE0_D01', (0, [0, 2]), False, False), 'FE1_D01': ('FE1_D01', (2, [0, 2, 3, 4, 5]), False, False), 'FE1_D10': ('FE1_D10', (3, [0, 1, 3, 4, 5]), False, False), 'FE0': ('FE0', (), False, False), 'FE1': ('FE1', (), False, False)}
  Transforming cell integral
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.0032 seconds
  Shape of reference tensor: (3, 6)
  Primary multi index:   rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00271 seconds
  Shape of reference tensor: (3, 6)
  Primary multi index:   rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00278 seconds
  Shape of reference tensor: (3, 6)
  Primary multi index:   rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00551 seconds
  Shape of reference tensor: (3, 3, 1)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [1] indices = [[0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [1] indices = [[0]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing quadrature representation
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  
  QG-utils, psi_tables:
  {7: {FiniteElement('Bubble', Cell('triangle', Space(2)), 3, None): {None: {(0, 1): array([[-2.77555756156e-16, 3.21964677141e-15, -1.9037602159, 1.9037602159,
          -1.22124532709e-15, 5.20988266488, -5.20988266488]], dtype=object), (1, 0): array([[4.90770463059e-16, -1.9037602159, 3.02976392448e-15, 1.9037602159,
          5.20988266488, -5.88564282095e-17, -5.20988266488]], dtype=object), (0, 0): array([[1.0, 0.220880757792, 0.220880757792, 0.220880757792,
          0.356378717426, 0.356378717426, 0.356378717426]], dtype=object)}}, FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None): {None: {(0, 1): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], dtype=object), (1, 0): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=object), (0, 0): array([[0.333333333333, 0.101286507323, 0.101286507323, 0.797426985353,
          0.470142064105, 0.470142064105, 0.0597158717898],
         [0.333333333333, 0.797426985353, 0.101286507323, 0.101286507323,
          0.0597158717898, 0.470142064105, 0.470142064105],
         [0.333333333333, 0.101286507323, 0.797426985353, 0.101286507323,
          0.470142064105, 0.0597158717898, 0.470142064105]], dtype=object)}}, FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 1, None): {None: {(0, 1): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], dtype=object), (1, 0): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=object), (0, 0): array([[0.333333333333, 0.101286507323, 0.101286507323, 0.797426985353,
          0.470142064105, 0.470142064105, 0.0597158717898],
         [0.333333333333, 0.797426985353, 0.101286507323, 0.101286507323,
          0.0597158717898, 0.470142064105, 0.470142064105],
         [0.333333333333, 0.101286507323, 0.797426985353, 0.101286507323,
          0.470142064105, 0.0597158717898, 0.470142064105]], dtype=object)}}}}
  
  QG-utils, psi_tables, flat_tables:
  {'FE0_D10': array([[4.90770463059e-16],
         [-1.9037602159],
         [3.02976392448e-15],
         [1.9037602159],
         [5.20988266488],
         [-5.88564282095e-17],
         [-5.20988266488]], dtype=object), 'FE0_D01': array([[-2.77555756156e-16],
         [3.21964677141e-15],
         [-1.9037602159],
         [1.9037602159],
         [-1.22124532709e-15],
         [5.20988266488],
         [-5.20988266488]], dtype=object), 'FE1_D01': array([[-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0]], dtype=object), 'FE2': array([[0.333333333333, 0.333333333333, 0.333333333333],
         [0.101286507323, 0.797426985353, 0.101286507323],
         [0.101286507323, 0.101286507323, 0.797426985353],
         [0.797426985353, 0.101286507323, 0.101286507323],
         [0.470142064105, 0.0597158717898, 0.470142064105],
         [0.470142064105, 0.470142064105, 0.0597158717898],
         [0.0597158717898, 0.470142064105, 0.470142064105]], dtype=object), 'FE1_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0': array([[1.0],
         [0.220880757792],
         [0.220880757792],
         [0.220880757792],
         [0.356378717426],
         [0.356378717426],
         [0.356378717426]], dtype=object), 'FE1': array([[0.333333333333, 0.333333333333, 0.333333333333],
         [0.101286507323, 0.797426985353, 0.101286507323],
         [0.101286507323, 0.101286507323, 0.797426985353],
         [0.797426985353, 0.101286507323, 0.101286507323],
         [0.470142064105, 0.0597158717898, 0.470142064105],
         [0.470142064105, 0.470142064105, 0.0597158717898],
         [0.0597158717898, 0.470142064105, 0.470142064105]], dtype=object), 'FE2_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE2_D01': array([[-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0]], dtype=object)}
  
  tables: {'FE0_D10': array([[4.90770463059e-16],
         [-1.9037602159],
         [3.02976392448e-15],
         [1.9037602159],
         [5.20988266488],
         [-5.88564282095e-17],
         [-5.20988266488]], dtype=object), 'FE0_D01': array([[-2.77555756156e-16],
         [3.21964677141e-15],
         [-1.9037602159],
         [1.9037602159],
         [-1.22124532709e-15],
         [5.20988266488],
         [-5.20988266488]], dtype=object), 'FE1_D01': array([[-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0]], dtype=object), 'FE1_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0': array([[1.0],
         [0.220880757792],
         [0.220880757792],
         [0.220880757792],
         [0.356378717426],
         [0.356378717426],
         [0.356378717426]], dtype=object), 'FE1': array([[0.333333333333, 0.333333333333, 0.333333333333],
         [0.101286507323, 0.797426985353, 0.101286507323],
         [0.101286507323, 0.101286507323, 0.797426985353],
         [0.797426985353, 0.101286507323, 0.101286507323],
         [0.470142064105, 0.0597158717898, 0.470142064105],
         [0.470142064105, 0.470142064105, 0.0597158717898],
         [0.0597158717898, 0.470142064105, 0.470142064105]], dtype=object)}
  
  name_map: {'FE1_D01': ['FE2_D01'], 'FE1_D10': ['FE2_D10'], 'FE1': ['FE2']}
  
  inv_name_map: {'FE0_D10': 'FE0_D10', 'FE0_D01': 'FE0_D01', 'FE1_D01': 'FE1_D01', 'FE2': 'FE1', 'FE1_D10': 'FE1_D10', 'FE0': 'FE0', 'FE1': 'FE1', 'FE2_D10': 'FE1_D10', 'FE2_D01': 'FE1_D01'}
  
  QG-utils, psi_tables, unique_tables:
  {'FE0_D10': array([[0],
         [-1.9037602159],
         [0],
         [1.9037602159],
         [5.20988266488],
         [0],
         [-5.20988266488]], dtype=object), 'FE0_D01': array([[0],
         [0],
         [-1.9037602159],
         [1.9037602159],
         [0],
         [5.20988266488],
         [-5.20988266488]], dtype=object), 'FE1_D01': array([[-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0]], dtype=object), 'FE0': array([[1.0],
         [0.220880757792],
         [0.220880757792],
         [0.220880757792],
         [0.356378717426],
         [0.356378717426],
         [0.356378717426]], dtype=object), 'FE1': array([[0.333333333333, 0.333333333333, 0.333333333333],
         [0.101286507323, 0.797426985353, 0.101286507323],
         [0.101286507323, 0.101286507323, 0.797426985353],
         [0.797426985353, 0.101286507323, 0.101286507323],
         [0.470142064105, 0.0597158717898, 0.470142064105],
         [0.470142064105, 0.470142064105, 0.0597158717898],
         [0.0597158717898, 0.470142064105, 0.470142064105]], dtype=object)}
  
  QG-utils, psi_tables, name_map:
  {'FE0_D10': ('FE0_D10', (), False, False), 'FE0_D01': ('FE0_D01', (), False, False), 'FE1_D01': ('FE1_D01', (0, [0, 2]), False, False), 'FE2': ('FE1', (), False, False), 'FE1_D10': ('FE1_D01', (1, [0, 1]), False, False), 'FE0': ('FE0', (), False, False), 'FE1': ('FE1', (), False, False), 'FE2_D10': ('FE1_D01', (1, [0, 1]), False, False), 'FE2_D01': ('FE1_D01', (0, [0, 2]), False, False)}
  Transforming cell integral
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00542 seconds
  Shape of reference tensor: (3, 3, 1)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00528 seconds
  Shape of reference tensor: (3, 3, 1)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00542 seconds
  Shape of reference tensor: (3, 3, 1)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 1] indices = [[0, 0], [1, 0], [2, 0]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00363 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00353 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00416 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00529 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00539 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00545 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.0053 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00544 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00537 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00533 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00543 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00533 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00542 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00539 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00529 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00567 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00552 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00531 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00541 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00541 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00545 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [6] indices = [[0], [1], [2], [3], [4], [5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing quadrature representation
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  
  QG-utils, psi_tables:
  {6: {FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 2, None): {None: {(0, 1): array([[0.633695145961, 0.633695145961, -2.26739029192, -0.783793963664,
          -0.783793963664, 0.567587927328],
         [0.0, 1.11022302463e-16, 3.33066907388e-16, -9.71445146547e-17,
          -1.11022302463e-16, 1.5959455979e-16],
         [-0.633695145961, 2.26739029192, -0.633695145961, 0.783793963664,
          -0.567587927328, 0.783793963664],
         [3.26739029192, 0.366304854039, 0.366304854039, 0.432412072672,
          1.78379396366, 1.78379396366],
         [-2.6645352591e-15, -2.90108543788, 2.90108543788,
          1.94289029309e-16, 1.35138189099, -1.35138189099],
         [-3.26739029192, -0.366304854039, -0.366304854039, -0.432412072672,
          -1.78379396366, -1.78379396366]], dtype=object), (1, 0): array([[0.633695145961, 0.633695145961, -2.26739029192, -0.783793963664,
          -0.783793963664, 0.567587927328],
         [2.26739029192, -0.633695145961, -0.633695145961, -0.567587927328,
          0.783793963664, 0.783793963664],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
         [0.366304854039, 3.26739029192, 0.366304854039, 1.78379396366,
          0.432412072672, 1.78379396366],
         [-0.366304854039, -3.26739029192, -0.366304854039, -1.78379396366,
          -0.432412072672, -1.78379396366],
         [-2.90108543788, -3.83550991463e-15, 2.90108543788, 1.35138189099,
          -6.22256055681e-17, -1.35138189099]], dtype=object), (0, 0): array([[-0.0748038077482, -0.0748038077482, 0.517632341988,
          -0.0482083778155, -0.0482083778155, -0.084730493094],
         [0.517632341988, -0.0748038077482, -0.0748038077482,
          -0.084730493094, -0.0482083778155, -0.0482083778155],
         [-0.0748038077482, 0.517632341988, -0.0748038077482,
          -0.0482083778155, -0.084730493094, -0.0482083778155],
         [0.299215230993, 0.299215230993, 0.0335448115231, 0.192833511262,
          0.192833511262, 0.795480226201],
         [0.0335448115231, 0.299215230993, 0.299215230993, 0.795480226201,
          0.192833511262, 0.192833511262],
         [0.299215230993, 0.0335448115231, 0.299215230993, 0.192833511262,
          0.795480226201, 0.192833511262]], dtype=object)}}, FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None): {None: {(0, 1): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], dtype=object), (1, 0): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=object), (0, 0): array([[0.0915762135098, 0.0915762135098, 0.81684757298, 0.445948490916,
          0.445948490916, 0.108103018168],
         [0.81684757298, 0.0915762135098, 0.0915762135098, 0.108103018168,
          0.445948490916, 0.445948490916],
         [0.0915762135098, 0.81684757298, 0.0915762135098, 0.445948490916,
          0.108103018168, 0.445948490916]], dtype=object)}}, FiniteElement('Discontinuous Lagrange', Cell('triangle', Space(2)), 1, None): {None: {(0, 1): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0]], dtype=object), (1, 0): array([[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0],
         [1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], dtype=object), (0, 0): array([[0.0915762135098, 0.0915762135098, 0.81684757298, 0.445948490916,
          0.445948490916, 0.108103018168],
         [0.81684757298, 0.0915762135098, 0.0915762135098, 0.108103018168,
          0.445948490916, 0.445948490916],
         [0.0915762135098, 0.81684757298, 0.0915762135098, 0.445948490916,
          0.108103018168, 0.445948490916]], dtype=object)}}}}
  
  QG-utils, psi_tables, flat_tables:
  {'FE0_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0_D01': array([[-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0]], dtype=object), 'FE1_D01': array([[-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0]], dtype=object), 'FE2': array([[-0.0748038077482, 0.517632341988, -0.0748038077482, 0.299215230993,
          0.0335448115231, 0.299215230993],
         [-0.0748038077482, -0.0748038077482, 0.517632341988, 0.299215230993,
          0.299215230993, 0.0335448115231],
         [0.517632341988, -0.0748038077482, -0.0748038077482,
          0.0335448115231, 0.299215230993, 0.299215230993],
         [-0.0482083778155, -0.084730493094, -0.0482083778155,
          0.192833511262, 0.795480226201, 0.192833511262],
         [-0.0482083778155, -0.0482083778155, -0.084730493094,
          0.192833511262, 0.192833511262, 0.795480226201],
         [-0.084730493094, -0.0482083778155, -0.0482083778155,
          0.795480226201, 0.192833511262, 0.192833511262]], dtype=object), 'FE1_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0': array([[0.0915762135098, 0.81684757298, 0.0915762135098],
         [0.0915762135098, 0.0915762135098, 0.81684757298],
         [0.81684757298, 0.0915762135098, 0.0915762135098],
         [0.445948490916, 0.108103018168, 0.445948490916],
         [0.445948490916, 0.445948490916, 0.108103018168],
         [0.108103018168, 0.445948490916, 0.445948490916]], dtype=object), 'FE1': array([[0.0915762135098, 0.81684757298, 0.0915762135098],
         [0.0915762135098, 0.0915762135098, 0.81684757298],
         [0.81684757298, 0.0915762135098, 0.0915762135098],
         [0.445948490916, 0.108103018168, 0.445948490916],
         [0.445948490916, 0.445948490916, 0.108103018168],
         [0.108103018168, 0.445948490916, 0.445948490916]], dtype=object), 'FE2_D10': array([[0.633695145961, 2.26739029192, 0.0, 0.366304854039,
          -0.366304854039, -2.90108543788],
         [0.633695145961, -0.633695145961, 0.0, 3.26739029192,
          -3.26739029192, -3.83550991463e-15],
         [-2.26739029192, -0.633695145961, 0.0, 0.366304854039,
          -0.366304854039, 2.90108543788],
         [-0.783793963664, -0.567587927328, 0.0, 1.78379396366,
          -1.78379396366, 1.35138189099],
         [-0.783793963664, 0.783793963664, 0.0, 0.432412072672,
          -0.432412072672, -6.22256055681e-17],
         [0.567587927328, 0.783793963664, 0.0, 1.78379396366, -1.78379396366,
          -1.35138189099]], dtype=object), 'FE2_D01': array([[0.633695145961, 0.0, -0.633695145961, 3.26739029192,
          -2.6645352591e-15, -3.26739029192],
         [0.633695145961, 1.11022302463e-16, 2.26739029192, 0.366304854039,
          -2.90108543788, -0.366304854039],
         [-2.26739029192, 3.33066907388e-16, -0.633695145961, 0.366304854039,
          2.90108543788, -0.366304854039],
         [-0.783793963664, -9.71445146547e-17, 0.783793963664,
          0.432412072672, 1.94289029309e-16, -0.432412072672],
         [-0.783793963664, -1.11022302463e-16, -0.567587927328,
          1.78379396366, 1.35138189099, -1.78379396366],
         [0.567587927328, 1.5959455979e-16, 0.783793963664, 1.78379396366,
          -1.35138189099, -1.78379396366]], dtype=object)}
  
  tables: {'FE0_D10': array([[-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0],
         [-1.0, 1.0, 0.0]], dtype=object), 'FE0_D01': array([[-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0],
         [-1.0, 0.0, 1.0]], dtype=object), 'FE2': array([[-0.0748038077482, 0.517632341988, -0.0748038077482, 0.299215230993,
          0.0335448115231, 0.299215230993],
         [-0.0748038077482, -0.0748038077482, 0.517632341988, 0.299215230993,
          0.299215230993, 0.0335448115231],
         [0.517632341988, -0.0748038077482, -0.0748038077482,
          0.0335448115231, 0.299215230993, 0.299215230993],
         [-0.0482083778155, -0.084730493094, -0.0482083778155,
          0.192833511262, 0.795480226201, 0.192833511262],
         [-0.0482083778155, -0.0482083778155, -0.084730493094,
          0.192833511262, 0.192833511262, 0.795480226201],
         [-0.084730493094, -0.0482083778155, -0.0482083778155,
          0.795480226201, 0.192833511262, 0.192833511262]], dtype=object), 'FE0': array([[0.0915762135098, 0.81684757298, 0.0915762135098],
         [0.0915762135098, 0.0915762135098, 0.81684757298],
         [0.81684757298, 0.0915762135098, 0.0915762135098],
         [0.445948490916, 0.108103018168, 0.445948490916],
         [0.445948490916, 0.445948490916, 0.108103018168],
         [0.108103018168, 0.445948490916, 0.445948490916]], dtype=object), 'FE2_D10': array([[0.633695145961, 2.26739029192, 0.0, 0.366304854039,
          -0.366304854039, -2.90108543788],
         [0.633695145961, -0.633695145961, 0.0, 3.26739029192,
          -3.26739029192, -3.83550991463e-15],
         [-2.26739029192, -0.633695145961, 0.0, 0.366304854039,
          -0.366304854039, 2.90108543788],
         [-0.783793963664, -0.567587927328, 0.0, 1.78379396366,
          -1.78379396366, 1.35138189099],
         [-0.783793963664, 0.783793963664, 0.0, 0.432412072672,
          -0.432412072672, -6.22256055681e-17],
         [0.567587927328, 0.783793963664, 0.0, 1.78379396366, -1.78379396366,
          -1.35138189099]], dtype=object), 'FE2_D01': array([[0.633695145961, 0.0, -0.633695145961, 3.26739029192,
          -2.6645352591e-15, -3.26739029192],
         [0.633695145961, 1.11022302463e-16, 2.26739029192, 0.366304854039,
          -2.90108543788, -0.366304854039],
         [-2.26739029192, 3.33066907388e-16, -0.633695145961, 0.366304854039,
          2.90108543788, -0.366304854039],
         [-0.783793963664, -9.71445146547e-17, 0.783793963664,
          0.432412072672, 1.94289029309e-16, -0.432412072672],
         [-0.783793963664, -1.11022302463e-16, -0.567587927328,
          1.78379396366, 1.35138189099, -1.78379396366],
         [0.567587927328, 1.5959455979e-16, 0.783793963664, 1.78379396366,
          -1.35138189099, -1.78379396366]], dtype=object)}
  
  name_map: {'FE0_D10': ['FE1_D10'], 'FE0_D01': ['FE1_D01'], 'FE0': ['FE1']}
  
  inv_name_map: {'FE0_D10': 'FE0_D10', 'FE0_D01': 'FE0_D01', 'FE1_D01': 'FE0_D01', 'FE2': 'FE2', 'FE1_D10': 'FE0_D10', 'FE0': 'FE0', 'FE1': 'FE0', 'FE2_D10': 'FE2_D10', 'FE2_D01': 'FE2_D01'}
  
  QG-utils, psi_tables, unique_tables:
  {'FE0_D01': array([[-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0],
         [-1.0, 1.0]], dtype=object), 'FE2': array([[-0.0748038077482, 0.517632341988, -0.0748038077482, 0.299215230993,
          0.0335448115231, 0.299215230993],
         [-0.0748038077482, -0.0748038077482, 0.517632341988, 0.299215230993,
          0.299215230993, 0.0335448115231],
         [0.517632341988, -0.0748038077482, -0.0748038077482,
          0.0335448115231, 0.299215230993, 0.299215230993],
         [-0.0482083778155, -0.084730493094, -0.0482083778155,
          0.192833511262, 0.795480226201, 0.192833511262],
         [-0.0482083778155, -0.0482083778155, -0.084730493094,
          0.192833511262, 0.192833511262, 0.795480226201],
         [-0.084730493094, -0.0482083778155, -0.0482083778155,
          0.795480226201, 0.192833511262, 0.192833511262]], dtype=object), 'FE0': array([[0.0915762135098, 0.81684757298, 0.0915762135098],
         [0.0915762135098, 0.0915762135098, 0.81684757298],
         [0.81684757298, 0.0915762135098, 0.0915762135098],
         [0.445948490916, 0.108103018168, 0.445948490916],
         [0.445948490916, 0.445948490916, 0.108103018168],
         [0.108103018168, 0.445948490916, 0.445948490916]], dtype=object), 'FE2_D10': array([[0.633695145961, 2.26739029192, 0.366304854039, -0.366304854039,
          -2.90108543788],
         [0.633695145961, -0.633695145961, 3.26739029192, -3.26739029192, 0],
         [-2.26739029192, -0.633695145961, 0.366304854039, -0.366304854039,
          2.90108543788],
         [-0.783793963664, -0.567587927328, 1.78379396366, -1.78379396366,
          1.35138189099],
         [-0.783793963664, 0.783793963664, 0.432412072672, -0.432412072672, 0],
         [0.567587927328, 0.783793963664, 1.78379396366, -1.78379396366,
          -1.35138189099]], dtype=object), 'FE2_D01': array([[0.633695145961, -0.633695145961, 3.26739029192, 0, -3.26739029192],
         [0.633695145961, 2.26739029192, 0.366304854039, -2.90108543788,
          -0.366304854039],
         [-2.26739029192, -0.633695145961, 0.366304854039, 2.90108543788,
          -0.366304854039],
         [-0.783793963664, 0.783793963664, 0.432412072672, 0, -0.432412072672],
         [-0.783793963664, -0.567587927328, 1.78379396366, 1.35138189099,
          -1.78379396366],
         [0.567587927328, 0.783793963664, 1.78379396366, -1.35138189099,
          -1.78379396366]], dtype=object)}
  
  QG-utils, psi_tables, name_map:
  {'FE0_D10': ('FE0_D01', (1, [0, 1]), False, False), 'FE0_D01': ('FE0_D01', (0, [0, 2]), False, False), 'FE1_D01': ('FE0_D01', (0, [0, 2]), False, False), 'FE2': ('FE2', (), False, False), 'FE1_D10': ('FE0_D01', (1, [0, 1]), False, False), 'FE0': ('FE0', (), False, False), 'FE1': ('FE0', (), False, False), 'FE2_D10': ('FE2_D10', (3, [0, 1, 3, 4, 5]), False, False), 'FE2_D01': ('FE2_D01', (2, [0, 2, 3, 4, 5]), False, False)}
  Transforming cell integral
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00435 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00444 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  54 entries computed in 0.00433 seconds
  Shape of reference tensor: (3, 3, 6)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00349 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00253 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00337 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00291 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00334 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00293 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00327 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00295 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00492 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00427 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.005 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00421 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00501 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.0042 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00503 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00415 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00507 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00417 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00497 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00425 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00496 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00431 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.0051 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00431 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00508 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00421 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.005 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00433 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.005 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00417 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00507 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00417 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00513 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00428 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00496 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.0048 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00538 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00422 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00506 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00418 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00524 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00427 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00493 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00424 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00502 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.0043 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00503 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.0043 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00515 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00474 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00511 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00424 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00508 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00421 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00495 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00428 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00504 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00448 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00509 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00416 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00505 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00422 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00516 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00414 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00512 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00419 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00493 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00434 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00493 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00429 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00494 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00436 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00516 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.0042 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00503 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00429 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.00504 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00419 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  18 entries computed in 0.005 seconds
  Shape of reference tensor: (1, 3, 6)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 6] indices = [[0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 0], [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [2, 0], [2, 1], [2, 2], [2, 3], [2, 4], [2, 5]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  Reusing element from cache
  Reusing element from cache
  9 entries computed in 0.00428 seconds
  Shape of reference tensor: (1, 3, 3)
  Primary multi index:   rank = 1 dims = [1] indices = [[0]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  36 entries computed in 0.00126 seconds
  Shape of reference tensor: (3, 3, 2, 2)
  Primary multi index:   rank = 2 dims = [3, 3] indices = [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 2 dims = [2, 2] indices = [[0, 0], [0, 1], [1, 0], [1, 1]]
  External multi index:  rank = 1 dims = [2] indices = [[0], [1]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.00117 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.00186 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.00182 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Precomputing integrals on reference element
  Reusing element from cache
  9 entries computed in 0.00169 seconds
  Shape of reference tensor: (3, 3)
  Primary multi index:   rank = 1 dims = [3] indices = [[0], [1], [2]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing tensor representation
  Extracting monomial form representation from UFL form
  Reusing monomial integrand from cache
  Transforming monomial form to reference element
  Precomputing integrals on reference element
  Reusing element from cache
  3 entries computed in 0.000797 seconds
  Shape of reference tensor: (3,)
  Primary multi index:   rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  Internal multi index:  rank = 0 dims = [] indices = [[]]
  Secondary multi index: rank = 1 dims = [3] indices = [[0], [1], [2]]
  External multi index:  rank = 0 dims = [] indices = [[]]
  Computing representation of forms
  
Compiler stage 2 finished in 0.773266 seconds.

Compiler stage 3: Optimizing intermediate representation
--------------------------------------------------------
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Optimising expressions for cell integral
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Optimising expressions for cell integral
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Optimising expressions for cell integral
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  Skipping FErari optimizations as requested.
  
Compiler stage 3 finished in 0.0182209 seconds.

Compiler stage 4: Generating code
---------------------------------
  Generating code for 6 elements
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp0
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: Y
  Removing unused variable: X
  Removing unused variable: C1
  Removing unused variable: C0
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: detJ
  Removing unused variable: J_11
  Removing unused variable: J_10
  Removing unused variable: J_01
  Removing unused variable: J_00
  Removing unused variable: x
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp0
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: ss
  Removing unused variable: rr
  Removing unused variable: Y
  Removing unused variable: X
  Removing unused variable: C1
  Removing unused variable: C0
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Removing unused variable: tmp2
  Removing unused variable: tmp1
  Removing unused variable: tmp7
  Removing unused variable: tmp6
  Removing unused variable: tmp5
  Removing unused variable: tt
  Generating code for 6 dofmaps
  Generating code for integrals
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: circumradius
  Removing unused variable: v0v1
  Removing unused variable: v0v2
  Removing unused variable: v1v2
  Removing unused variable: volume
  Cell, number of operations to compute tensor: 372
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: detJ
  Removing unused variable: J_11
  Removing unused variable: J_10
  Removing unused variable: J_01
  Removing unused variable: J_00
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: circumradius
  Removing unused variable: v0v1
  Removing unused variable: v0v2
  Removing unused variable: v1v2
  Removing unused variable: volume
  Cell, number of operations to compute tensor: 411
  Removing unused variable: det
  Removing unused variable: dx1
  Removing unused variable: dx0
  Removing unused variable: v1
  Removing unused variable: v0
  Removing unused variable: edge_vertices
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: detJ
  Removing unused variable: J_11
  Removing unused variable: J_10
  Removing unused variable: J_01
  Removing unused variable: J_00
  Removing unused variable: x
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: detJ
  Removing unused variable: J_11
  Removing unused variable: J_10
  Removing unused variable: J_01
  Removing unused variable: J_00
  Removing unused variable: K1_11
  Removing unused variable: K1_10
  Removing unused variable: K1_01
  Removing unused variable: K1_00
  Removing unused variable: detJ1
  Removing unused variable: J1_11
  Removing unused variable: J1_10
  Removing unused variable: J1_01
  Removing unused variable: J1_00
  Removing unused variable: x1
  Removing unused variable: K0_11
  Removing unused variable: K0_10
  Removing unused variable: K0_01
  Removing unused variable: K0_00
  Removing unused variable: detJ0
  Removing unused variable: J0_11
  Removing unused variable: J0_10
  Removing unused variable: J0_01
  Removing unused variable: J0_00
  Removing unused variable: circumradius
  Removing unused variable: v0v1
  Removing unused variable: v0v2
  Removing unused variable: v1v2
  Removing unused variable: volume
  Cell, number of operations to compute tensor: 552
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: detJ
  Removing unused variable: J_11
  Removing unused variable: J_10
  Removing unused variable: J_01
  Removing unused variable: J_00
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: detJ
  Removing unused variable: J_11
  Removing unused variable: J_10
  Removing unused variable: J_01
  Removing unused variable: J_00
  Removing unused variable: K1_11
  Removing unused variable: K1_10
  Removing unused variable: K1_01
  Removing unused variable: K1_00
  Removing unused variable: detJ1
  Removing unused variable: J1_11
  Removing unused variable: J1_10
  Removing unused variable: J1_01
  Removing unused variable: J1_00
  Removing unused variable: x1
  Removing unused variable: K0_11
  Removing unused variable: K0_10
  Removing unused variable: K0_01
  Removing unused variable: K0_00
  Removing unused variable: detJ0
  Removing unused variable: J0_11
  Removing unused variable: J0_10
  Removing unused variable: J0_01
  Removing unused variable: J0_00
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Removing unused variable: detJ
  Removing unused variable: J_11
  Removing unused variable: J_10
  Removing unused variable: J_01
  Removing unused variable: J_00
  Removing unused variable: K_11
  Removing unused variable: K_10
  Removing unused variable: K_01
  Removing unused variable: K_00
  Generating code for forms
  
Compiler stage 4 finished in 0.834895 seconds.

Compiler stage 4.1: Generating additional wrapper code
------------------------------------------------------
  Generating wrapper code for DOLFIN
  
Compiler stage 4.1 finished in 0.00545597 seconds.

Compiler stage 5: Formatting code
---------------------------------
  Output written to ./AdaptivePoisson.h.
  
Compiler stage 5 finished in 0.00451684 seconds.

[1;37;32mFFC finished in 1.79441 seconds.[0m
